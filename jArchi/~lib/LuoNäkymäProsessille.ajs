/*
 * Luo 360-näkymän Espoon tiedonhallintamalliin kuuluvalle prosessille. Näkymä luodaan 
 * Views > Tiedonhallintamalli > Prosessihierarkia kansion alikansioon.
 * Luo näkymän kaikille Archin käyttöliittymässä valituille prosesseille. Valittuna voi myös olla
 * prosessien sijaan niiden 360-näkymät, jotka tällöin korvataan. Valittuna voi olla myös kansioita, 
 * jolloin näiden alla olevat prosessit tai prosessien 360-näkymät luodaan. 
 */

"use strict";

load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");
load(__SCRIPTS_DIR__ + "~lib/ViewRecycler.ajs");
load(__SCRIPTS_DIR__ + "~lib/VäritäNäkymä.ajs");

function luoNakymaProsessille(element) {
  var maxaliprosessienyhteyksia = 25;
  //var korvaakaikki = 0;

  var views = $("folder.Views").first();
  var tiedonhallintamalli = $("#" + views.id).children("folder.Tiedonhallintamalli").first();
  if (tiedonhallintamalli == null) {
    tiedonhallintamalli = views.createFolder("Tiedonhallintamalli");
  }
  var prosessihierarkia = $("#" + tiedonhallintamalli.id).children("folder.Prosessihierarkia").first();
  if (prosessihierarkia == null) {
    prosessihierarkia = tiedonhallintamalli.createFolder("Prosessihierarkia");
  }

  function varmistaKansio(prosessi) {
    var ylaprosessi = $("#" + prosessi.id).outRels("specialization-relationship").targetEnds("business-process").filter(fth).first();
    var ylafolder = ylaprosessi == null ? prosessihierarkia : varmistaKansio(ylaprosessi);
    var nextfolder = $("#" + ylafolder.id).children("folder." + prosessi.name).first();
    if (nextfolder == null) {
      nextfolder = ylafolder.createFolder(prosessi.name);
    }
    return nextfolder;
  }

  function lisaaAliprosessit(pros, kohdepros, map) {
    $("#" + pros.id).inRels("specialization-relationship").sourceEnds("business-process").filter(fth).each(function (alipros) {
      if (!map[alipros.id]) { // tämän pitäisi estää ikisilmukat?
        map[alipros.id] = kohdepros.id;
        lisaaAliprosessit(alipros, kohdepros, map);
      }
    });
  }

  function luoAliprosessiMap(prosessi) {
    var map = {};
    $("#" + prosessi.id).inRels("specialization-relationship").sourceEnds("business-process").filter(fth).each(function (pros) {
      map[pros.id] = pros.id;
      lisaaAliprosessit(pros, pros, map);
    });
    return map;
  }

  console.log("Luodaan näkymää prosessille " + element.name + "...");

  var ylaprosessi = $("#" + element.id).outRels("specialization-relationship").targetEnds("business-process").filter(fth).first();
  var folder = ylaprosessi == null ? prosessihierarkia : varmistaKansio(ylaprosessi);

  var onjo = $("view").filter(function (view) { return view.prop("_KuvattavaKohde") == element.id; });
  onjo = onjo.add($("#" + folder.id).children("view." + element.name).not(onjo));

  /*var korvaa = true;
  if (onjo.size() > 0) {
    if (!korvaakaikki) {
      korvaa = window.confirm("Prosessilla " + element.name + " on jo näkym(i)ä. Korvataanko? (Muutoin tehdään uusi rinnalle)");
      if (korvaa && valinta.size() > 1) {
        var resp2 = window.confirm("Korvataanko kaikki loput? Muutoin kysytään yksitellen.");
        if (resp2) korvaakaikki = 1;
      }
    }
  }*/

  var viewObj = createOrRecycleArchimateView(onjo, element.name, folder, true);
  var nakyma = viewObj.view;
  nakyma.prop("_KuvattavaKohde", element.id);
  nakyma.prop("_Luotu", (new Date()).format("isoDateTime"));
  nakyma.prop("_Tiedonhallintamalli", "1");
  nakyma.documentation = element.documentation + "\n\n(Klikkaa prosessia kuvassa nähdäksesi sen tarkempia ominaisuuksia vasemmalla alhaalla)";
  element.prop("_OmaNäkymä", nakyma.id);
  var juoksevay = reunusy;

  var ylaprosessiObj = null;
  if (ylaprosessi) {
    ylaprosessiObj = recycledViewAddElement(viewObj, ylaprosessi, keskitax(1, 1), juoksevay, kuvionleveys, kuvionkorkeus);
    juoksevay += kuvionkorkeus + kuviovaliy;
  }

  var saasyotteita = $("#" + element.id).inRels("flow-relationship").sourceEnds("business-process").filter(fth);
  saasyotteita.sort(tunnistecompare);
  var tuottaasyotteita = $("#" + element.id).outRels("flow-relationship").targetEnds("business-process").filter(fth);
  tuottaasyotteita.sort(tunnistecompare);
  saasyotteita = saasyotteita.not(tuottaasyotteita);
  var syotenum = Math.max(saasyotteita.size(), tuottaasyotteita.size());
  var syotekorkeus = syotenum * (kuvionkorkeus + kuviovaliy) - kuviovaliy;
  syotekorkeus = Math.max(syotekorkeus, 2 * kuvionkorkeus); // vähän extra tilaa itse prosessille

  // lisätään käsillä oleva prosessi keskelle
  var prosessiObj = recycledViewAddElement(viewObj, element, keskitax(1, 1), keskitay(juoksevay, syotekorkeus, 1, 1), kuvionleveys, kuvionkorkeus);
  if (ylaprosessiObj) {
    var relaatio = $("#" + element.id).outRels("specialization-relationship").filter(function (rel) { return rel.target.id == ylaprosessi.id; }).first();
    recycledViewAddRelationship(viewObj, relaatio, prosessiObj, ylaprosessiObj);
  }

  var i = 1;
  saasyotteita.each(function (syote) {
    var syoteObj = recycledViewAddElement(viewObj, syote, reunusx, keskitay(juoksevay, syotekorkeus, i++, saasyotteita.size()), kuvionleveys, kuvionkorkeus);
    var relaatio = $("#" + element.id).inRels("flow-relationship").filter(function (rel) { return rel.source.id == syote.id; }).first();
    recycledViewAddRelationship(viewObj, relaatio, syoteObj, prosessiObj);
  });
  i = 1;
  tuottaasyotteita.each(function (syote) {
    var syoteObj = recycledViewAddElement(viewObj, syote, kokoleveys - reunusx - kuvionleveys, keskitay(juoksevay, syotekorkeus, i++, tuottaasyotteita.size()), kuvionleveys, kuvionkorkeus);
    var relaatio = $("#" + element.id).outRels("flow-relationship").filter(function (rel) { return rel.target.id == syote.id; }).first();
    recycledViewAddRelationship(viewObj, relaatio, prosessiObj, syoteObj);
    relaatio = $("#" + element.id).inRels("flow-relationship").filter(function (rel) { return rel.source.id == syote.id; }).first();
    if (relaatio) recycledViewAddRelationship(viewObj, relaatio, syoteObj, prosessiObj);
  });

  juoksevay += syotekorkeus + kuviovaliy;

  var tietovarannot = $("#" + element.id).inRels("serving-relationship").sourceEnds("product").filter(fthHaving({ "_Tietovaranto": "1" }));
  tietovarannot.sort(namecompare);
  var tietojarjestelmat = $("#" + element.id).inRels("serving-relationship").sourceEnds("application-component").filter(fth);
  tietojarjestelmat.sort(namecompare);
  var tehtavaluokat = $("#" + element.id).outRels("serving-relationship").targetEnds("business-function").filter(fth);
  tehtavaluokat.sort(tunnistecompare);

  var rivillakpl = Math.min(kuvioitamaxrivi, tietovarannot.size() + tietojarjestelmat.size());
  var nykyx = 1;
  tietovarannot.each(function (elem) {
    recycledViewAddElement(viewObj, elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
    nykyx++;
    if (nykyx > rivillakpl) {
      nykyx = 1;
      juoksevay += kuvionkorkeus + kuviovaliy;
    }
  });
  tietojarjestelmat.each(function (elem) {
    recycledViewAddElement(viewObj, elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
    nykyx++;
    if (nykyx > rivillakpl) {
      nykyx = 1;
      juoksevay += kuvionkorkeus + kuviovaliy;
    }
  });
  if (nykyx > 1) juoksevay += kuvionkorkeus + kuviovaliy;
  juoksevay += Math.round((kuvionkorkeus + kuviovaliy) / 2);

  var aliprosessit = $("#" + element.id).inRels("specialization-relationship").sourceEnds("business-process").filter(fth);
  aliprosessit.sort(tunnistecompare);
  if (aliprosessit.size() > 0) {
    var aliprosrelaatiot;
    if (rivillakpl > 0) {  // kohdeprosessin käyttämien tietovarantojen ja tietojärjestelmien määrä > 0?
      var note = createRecycledObject(viewObj, "aliprosessit-note", "diagram-model-note", reunusx, juoksevay, noteleveys, notekorkeus);
      note.setText("Prosessin " + element.name + " aliprosessit sekä niiden itse tai omissa aliprosesseissaan hyödyntämät tietovarannot ja tietojärjestelmät");
      juoksevay += notekorkeus + kuviovaliy;
      aliprosrelaatiot = 0;
    } else aliprosrelaatiot = 1;

    rivillakpl = Math.min(kuvioitamaxrivi, aliprosessit.size());
    nykyx = 1;
    aliprosessit.each(function (elem) {
      var aliprosObj = recycledViewAddElement(viewObj, elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
      if (aliprosrelaatiot) {
        var relaatio = $("#" + elem.id).outRels("specialization-relationship").filter(function (rel) { return $("#" + rel.id).targetEnds("#" + element.id).size() > 0; }).first();
        recycledViewAddRelationship(viewObj, relaatio, aliprosObj, prosessiObj);
      }
      nykyx++;
      if (nykyx > rivillakpl) {
        nykyx = 1;
        juoksevay += kuvionkorkeus + kuviovaliy;
      }
    });
    if (nykyx > 1) juoksevay += kuvionkorkeus + kuviovaliy;
  }
  juoksevay += kuvionkorkeus + kuviovaliy;

  var aliprosessimap = luoAliprosessiMap(element);

  var alitietovarannot = $("empty");
  var alitietojarjestelmat = $("empty");
  var alitehtavaluokat = $("empty");
  for (var aliprosid in aliprosessimap) {
    alitietovarannot.add($("#" + aliprosid).inRels("serving-relationship").sourceEnds("product").filter(fth).not(alitietovarannot));
    alitietojarjestelmat.add($("#" + aliprosid).inRels("serving-relationship").sourceEnds("application-component").filter(fth).not(alitietojarjestelmat));
    alitehtavaluokat.add($("#" + aliprosid).outRels("serving-relationship").targetEnds("business-function").filter(fth).not(alitehtavaluokat));
  }
  alitietovarannot = alitietovarannot.not(tietovarannot);
  alitietovarannot.sort(namecompare);
  alitietojarjestelmat = alitietojarjestelmat.not(tietojarjestelmat);
  alitietojarjestelmat.sort(namecompare);
  alitehtavaluokat = alitehtavaluokat.not(tehtavaluokat);
  alitehtavaluokat.sort(tunnistecompare);

  rivillakpl = Math.min(kuvioitamaxrivi, alitietovarannot.size() + alitietojarjestelmat.size());
  nykyx = 1;
  alitietovarannot.each(function (elem) {
    recycledViewAddElement(viewObj, elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
    nykyx++;
    if (nykyx > rivillakpl) {
      nykyx = 1;
      juoksevay += kuvionkorkeus + kuviovaliy;
    }
  });
  alitietojarjestelmat.each(function (elem) {
    recycledViewAddElement(viewObj, elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
    nykyx++;
    if (nykyx > rivillakpl) {
      nykyx = 1;
      juoksevay += kuviovaliy + kuvionkorkeus;
    }
  });
  if (nykyx > 1) juoksevay += 3 * kuviovaliy + kuvionkorkeus;

  // lisätään tietovarantojen ja tietojärjestelmien relaatioita
  aliprosessimap[element.id] = element.id; // tarkastellaan myös kohdeprosessi tässä
  var aliprosessivalues = {};
  for (var alipros in aliprosessimap) {
    aliprosessivalues[aliprosessimap[alipros]] = alipros;
  }
  var nakymaprosmap = {}
  $("#" + nakyma.id).children("business-process").each(function (viewpros) {
    nakymaprosmap[viewpros.concept.id] = viewpros;
  });
  var tv_ja_tj = $("#" + nakyma.id).children("product").add($("#" + nakyma.id).children("application-component"));
  var aliprosrels = [];
  tv_ja_tj.each(function (viewelem) {
    var kasitelty = {};
    $("#" + viewelem.concept.id).outRels("serving-relationship").each(function (rel) {
      var kohdepros = $("#" + rel.id).targetEnds("business-process").first();
      if (kohdepros == null) return;
      if (!aliprosessivalues[kohdepros.id]) return;
      var kuvanpros_id = aliprosessimap[kohdepros.id];
      if (kuvanpros_id == null) return;
      if (kasitelty[kuvanpros_id]) return;
      aliprosrels.push({
        "rel": rel,
        "src": viewelem,
        "trg": nakymaprosmap[kuvanpros_id]
      });
      kasitelty[kuvanpros_id] = "1";
    });
  });
  //console.log("aliprosrels.length = " + aliprosrels.length);
  if (aliprosrels.length <= maxaliprosessienyhteyksia) {
    for (i = 0; i < aliprosrels.length; i++) {
      recycledViewAddRelationship(viewObj, aliprosrels[i]["rel"], aliprosrels[i]["src"], aliprosrels[i]["trg"]);
    }
  }

  if (tehtavaluokat.size() > 0) {
    var note = createRecycledObject(viewObj, "tehtavaluokat-note", "diagram-model-note", reunusx, juoksevay, noteleveys, notekorkeus);
    note.setText("Tehtäväluokat, jotka liittyvät prosessiin " + element.name);
    juoksevay += notekorkeus + kuviovaliy;
    rivillakpl = Math.min(kuvioitamaxrivi, tehtavaluokat.size());
    nykyx = 1;
    tehtavaluokat.each(function (elem) {
      recycledViewAddElement(viewObj, elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
      nykyx++;
      if (nykyx > rivillakpl) {
        nykyx = 1;
        juoksevay += kuvionkorkeus + kuviovaliy;
      }
    });
  }
  juoksevay += kuviovaliy;
  if (alitehtavaluokat.size() > 0) {
    var note = createRecycledObject(viewObj, "aliprosessien-tehtavaluokat-note", "diagram-model-note", reunusx, juoksevay, noteleveys, notekorkeus);
    note.setText("Kuvatun prosessin aliprosesseihin liittyvät " + (tehtavaluokat.size() > 0 ? "lisäksi" : "") + " tehtäväluokat");
    juoksevay += notekorkeus + kuviovaliy;
    rivillakpl = Math.min(kuvioitamaxrivi, alitehtavaluokat.size());
    nykyx = 1;
    alitehtavaluokat.each(function (elem) {
      recycledViewAddElement(viewObj, elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
      nykyx++;
      if (nykyx > rivillakpl) {
        nykyx = 1;
        juoksevay += kuvionkorkeus + kuviovaliy;
      }
    });
  }

  recycledViewFinishRecycling(viewObj);
  varitaNakyma(nakyma);

  console.log("... luotu.");
}

