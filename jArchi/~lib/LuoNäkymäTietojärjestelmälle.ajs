/*
/*
 * Luo 360-näkymän Espoon tiedonhallintamalliin kuuluvalle tietojärjestelmälle. Näkymä luodaan 
 * Views > Tiedonhallintamalli > Tietojärjestelmät kansion alikansioon.
 * Luo näkymän kaikille Archin käyttöliittymässä valituille tietojärjestelmille. Valittuna voi myös olla
 * järjestelmien sijaan niiden 360-näkymät, jotka tällöin korvataan. Valittuna voi olla myös kansioita, 
 * jolloin kaikki näiden alla olevat järjestelmät tai järjestelmien 360-näkymät luodaan. Kysyy ennen olemassa 
 * olevien näkymien korvaamista uusilla.
 */

"use strict";
load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");
load(__SCRIPTS_DIR__ + "~lib/ViewRecycler.ajs");
load(__SCRIPTS_DIR__ + "~lib/VäritäNäkymä.ajs");

function luoNakymaTietojarjestelmalle(element) {

  console.log("Luodaan näkymää tietojärjestelmälle " + element.name + "...");

  var views = $("folder.Views").first();
  var tiedonhallintamalliFolder = $("#" + views.id).children("folder.Tiedonhallintamalli").first();
  if (tiedonhallintamalliFolder == null) {
    tiedonhallintamalliFolder = views.createFolder("Tiedonhallintamalli");
  }
  var tietojarjestelmatFolder = $("#" + tiedonhallintamalliFolder.id).children("folder.Tietojärjestelmät").first();
  if (tietojarjestelmatFolder == null) {
    tietojarjestelmatFolder = tiedonhallintamalliFolder.createFolder("Tietojärjestelmät");
  }

  var folder = tietojarjestelmatFolder;
  var omistaja = $("#" + element.id).inRels("association-relationship.vastaa").sourceEnds("business-actor").first();
  if (omistaja) {
    var toimiala = omistaja.prop("Toimiala");
    if (!toimiala) toimiala = "Muut";
    if (omistaja.prop("Sisäinen/ulkoinen") == "ulkoinen") toimiala = "Ulkoiset";
    var toimialaFolder = $("#" + tietojarjestelmatFolder.id).children("folder." + toimiala).first();
    if (toimialaFolder == null) {
      toimialaFolder = tietojarjestelmatFolder.createFolder(toimiala);
    }
    var omistajaFolder = $("#" + toimialaFolder.id).children("folder." + omistaja.name).first();
    if (omistajaFolder == null) {
      omistajaFolder = toimialaFolder.createFolder(omistaja.name);
    }
    folder = omistajaFolder;
  } else if (element.prop("_JärjestelmäsalkunVapaateksti") == "1") {
    folder = $("#" + tietojarjestelmatFolder.id).children("folder.Vapaatekstit Järjestelmäsalkun liittymissä").first();
    if (folder == null) {
      folder = tietojarjestelmatFolder.createFolder("Vapaatekstit Järjestelmäsalkun liittymissä");
    }
  }

  var onjo = $("view").filter(function (view) { return view.prop("_KuvattavaKohde") == element.id; });
  onjo = onjo.add($("#" + folder.id).children("view." + element.name).not(onjo));

  /*var korvaa = true;
  if (onjo.size() > 0) {
    if (!korvaakaikki) {
      korvaa = window.confirm("Tietojärjestelmällä " + element.name + " on jo näkym(i)ä. Korvataanko? (Muutoin tehdään uusi rinnalle)");
      if (korvaa && valinta.size() > 1) {
        resp2 = window.confirm("Korvataanko kaikki loput? Muutoin kysytään yksitellen.");
        if (resp2) korvaakaikki = 1;
      }
    }
  }*/

  var viewObj = createOrRecycleArchimateView(onjo, element.name, folder, true);
  var nakyma = viewObj.view;
  nakyma.prop("_KuvattavaKohde", element.id);
  nakyma.prop("_Luotu", (new Date()).format("isoDateTime"));
  nakyma.prop("_Tiedonhallintamalli", "1");
  nakyma.documentation = element.documentation + "\n\n(Klikkaa tietojärjestelmää kuvassa nähdäksesi sen tarkempia ominaisuuksia vasemmalla alhaalla)";
  element.prop("_OmaNäkymä", nakyma.id);
  var juoksevay = reunusy;

  var tietovarannot = $("#" + element.id).outRels("serving-relationship").targetEnds("product").filter(fthHaving({ "_Tietovaranto": "1" }));
  tietovarannot.sort(namecompare);
  tietovarannot.add($("#" + element.id).inRels("composition-relationship").sourceEnds("application-component").filter(fth).not($("#" + element.id)));  // lisätään lopuksi mahd. pääjärjestelmä!
  var tietovarantoObjs = [];
  if (tietovarannot.size() > 0) {
    var rivillakpl = Math.min(kuvioitamaxrivi, tietovarannot.size());
    var nykyx = 1;
    tietovarannot.each(function (elem) {
      tietovarantoObjs.push(recycledViewAddElement(viewObj, elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus));
      nykyx++;
      if (nykyx > rivillakpl) {
        nykyx = 1;
        juoksevay += kuvionkorkeus + kuviovaliy;
      }
    });
    if (nykyx > 1) juoksevay += kuvionkorkeus + kuviovaliy;
  }

  function liittymientiedot(jarjestelmat) {
    jarjestelmat.sort(namecompare);
    var retval = {};
    retval.korkeus = -kuviovaliy;
    retval.num = 0;
    retval.jarjestelmat = [];
    jarjestelmat.each(function (jarj) {
      var jarjtiedot = {};
      jarjtiedot.jarjestelma = jarj;
      var rels = $("#" + element.id).rels("flow-relationship").filter(function (rel) { return (rel.source.id == jarj.id && rel.target.id == element.id) || (rel.source.id == element.id && rel.target.id == jarj.id); });
      rels.sort(namecompare);
      jarjtiedot.liittymat = [];
      rels.each(function (rel) { jarjtiedot.liittymat.push(rel); });
      jarjtiedot.num = rels.size();
      jarjtiedot.korkeus = (kuvionkorkeus + kuviovaliy) + (rels.size() > 2 ? (rels.size() - 2) * kuviovaliy : 0);
      /*** BEGIN vapaatekstien metsästys */
      jarjtiedot.varsinaiset = [];
      $("#" + jarj.id).inRels("realization-relationship").sourceEnds("application-component").each(function (jarj2) { jarjtiedot.varsinaiset.push(jarj2); });
      jarjtiedot.varsinaisenkorkeus = jarjtiedot.varsinaiset.length ? (kuvionkorkeus + kuviovaliy) : 0; // lisätään tila vain yhdelle varsinaiselle, vain yksi käsitellään jos löytyy
      // jarjtiedot.num += varsinaisetnum; // oli aiemmin tämän tyyppinen, ei tarvita?
      /*** END vapaatekstien metsästys */
      retval.jarjestelmat.push(jarjtiedot);
      retval.korkeus += jarjtiedot.korkeus + jarjtiedot.varsinaisenkorkeus;
      retval.num++;
    });
    return retval;
  }

  var inputjarjestelmat = $("#" + element.id).inRels("flow-relationship").sourceEnds("application-component").filter(fth);
  var outputjarjestelmat = $("#" + element.id).outRels("flow-relationship").targetEnds("application-component").filter(fth);
  inputjarjestelmat = inputjarjestelmat.not(outputjarjestelmat);
  var inputliittymat = liittymientiedot(inputjarjestelmat);
  var outputliittymat = liittymientiedot(outputjarjestelmat);

  var liittymakorkeus = Math.max(inputliittymat.korkeus, outputliittymat.korkeus);
  console.log("inputliittymat.korkeus = " + inputliittymat.korkeus + ", outputliittymat.korkeus = " + outputliittymat.korkeus + ", liittymakorkeus = " + liittymakorkeus);
  liittymakorkeus = Math.max(liittymakorkeus, 2 * kuvionkorkeus); // vähän extra tilaa itse kuvattavalle järjestelmälle, jos ei ole liittymiä

  // lisätään käsillä oleva järjestelmä keskelle
  //var jarjestelmaObj = recycledViewAddElement(viewObj, element, keskitax(1, 1), keskitay(juoksevay, liittymakorkeus, 1, 1), kuvionleveys, kuvionkorkeus);
  var jarjestelmaObj = recycledViewAddElement(viewObj, element, keskitax(1, 1), juoksevay + Math.round((liittymakorkeus - kuvionkorkeus) / 2), kuvionleveys, kuvionkorkeus);
  for (var i = 0; i < tietovarantoObjs.length; i++) {
    var relaatio = $("#" + element.id).outRels("serving-relationship").filter(function (rel) { return rel.target.id == tietovarantoObjs[i].concept.id; }).first();
    if (relaatio) recycledViewAddRelationship(viewObj, relaatio, jarjestelmaObj, tietovarantoObjs[i]);
    else {
      // järjestelmäkokonaisuuden pääjärjestelmä
      relaatio = $("#" + element.id).inRels("composition-relationship").filter(function (rel) { return rel.source.id == tietovarantoObjs[i].concept.id; }).first();
      recycledViewAddRelationship(viewObj, relaatio, tietovarantoObjs[i], jarjestelmaObj);
    }
  }

  var paljon_liittymia = false;
  var juoksevay_input = juoksevay + Math.round((liittymakorkeus - inputliittymat.korkeus) / 2);
  inputliittymat.jarjestelmat.forEach(function (jarjtiedot) {
    console.log(jarjtiedot.jarjestelma);
    /*** BEGIN vapaatekstien metsästys */
    if (jarjtiedot.varsinaiset.length) {
      var varsinaisObj = recycledViewAddElement(viewObj, jarjtiedot.varsinaiset[0], reunusx, juoksevay_input, kuvionleveys, kuvionkorkeus);
      juoksevay_input += kuvionkorkeus + kuviovaliy;
    }
    /*** END vapaatekstien metsästys */
    var inputObj = recycledViewAddElement(viewObj, jarjtiedot.jarjestelma, reunusx, juoksevay_input + Math.round((jarjtiedot.korkeus - kuvionkorkeus - kuviovaliy) / 2), kuvionleveys, kuvionkorkeus);
    juoksevay_input += jarjtiedot.korkeus;
    jarjtiedot.liittymat.forEach(function (liittyma) {
      console.log("-> " + liittyma);
      recycledViewAddRelationship(viewObj, liittyma, inputObj, jarjestelmaObj);
    });
    if (jarjtiedot.liittymat.length > 2) paljon_liittymia = true;
    /*** BEGIN vapaatekstien metsästys */
    if (jarjtiedot.varsinaiset.length) {
      var relaatio = $("#" + jarjtiedot.jarjestelma.id).inRels("realization-relationship").filter(function (rel) { return rel.source.id == jarjtiedot.varsinaiset[0].id; }).first();
      console.log("*> " + relaatio);
      recycledViewAddRelationship(viewObj, relaatio, varsinaisObj, inputObj);
    }
    /*** END vapaatekstien metsästys */
  });
  var juoksevay_output = juoksevay + Math.round((liittymakorkeus - outputliittymat.korkeus) / 2);
  outputliittymat.jarjestelmat.forEach(function (jarjtiedot) {
    console.log(jarjtiedot.jarjestelma);
    /*** BEGIN vapaatekstien metsästys */
    if (jarjtiedot.varsinaiset.length) {
      var varsinaisObj = recycledViewAddElement(viewObj, jarjtiedot.varsinaiset[0], kokoleveys - reunusx - kuvionleveys, juoksevay_output, kuvionleveys, kuvionkorkeus);
      juoksevay_output += kuvionkorkeus + kuviovaliy;
    }
    /*** END vapaatekstien metsästys */
    var outputObj = recycledViewAddElement(viewObj, jarjtiedot.jarjestelma, kokoleveys - reunusx - kuvionleveys, juoksevay_output + Math.round((jarjtiedot.korkeus - kuvionkorkeus - kuviovaliy) / 2), kuvionleveys, kuvionkorkeus);
    juoksevay_output += jarjtiedot.korkeus;
    jarjtiedot.liittymat.forEach(function (liittyma) {
      console.log("<- " + liittyma);
      if (liittyma.target.id == jarjtiedot.jarjestelma.id) {
        //console.log("    (T) " + liittyma.source + " -> " + liittyma.target + "; " + jarjestelmaObj + " > " + outputObj);
        recycledViewAddRelationship(viewObj, liittyma, jarjestelmaObj, outputObj);
      }
      if (liittyma.source.id == jarjtiedot.jarjestelma.id) {
        //console.log("    (S) " + liittyma.source + " -> " + liittyma.target + "; " + outputObj + " > " + jarjestelmaObj);
        recycledViewAddRelationship(viewObj, liittyma, outputObj, jarjestelmaObj);
      }
    });
    if (jarjtiedot.liittymat.length > 2) paljon_liittymia = true;
    /*** BEGIN vapaatekstien metsästys */
    if (jarjtiedot.varsinaiset.length) {
      var relaatio = $("#" + jarjtiedot.jarjestelma.id).inRels("realization-relationship").filter(function (rel) { return rel.source.id == jarjtiedot.varsinaiset[0].id; }).first();
      console.log("<* " + relaatio);
      recycledViewAddRelationship(viewObj, relaatio, varsinaisObj, outputObj);
    }
    /*** END vapaatekstien metsästys */
  });

  juoksevay += liittymakorkeus + (2 * kuviovaliy);

  var alijarjestelmat = $("#" + element.id).outRels("composition-relationship").targetEnds("application-component").filter(fth).not($("#" + element.id));
  alijarjestelmat.sort(namecompare);
  var rivillakpl = Math.min(kuvioitamaxrivi, alijarjestelmat.size());
  var nykyx = 1;
  alijarjestelmat.each(function (elem) {
    var alijarjObj = recycledViewAddElement(viewObj, elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
    var relaatio = $("#" + element.id).outRels("composition-relationship").filter(function (rel) { return rel.target.id == elem.id; }).first();
    recycledViewAddRelationship(viewObj, relaatio, jarjestelmaObj, alijarjObj);
    nykyx++;
    if (nykyx > rivillakpl) {
      nykyx = 1;
      juoksevay += kuvionkorkeus + kuviovaliy;
    }
  });
  if (nykyx > 1) juoksevay += kuvionkorkeus + kuviovaliy;
  juoksevay += Math.round((kuvionkorkeus + kuviovaliy) / 4);

  notekorkeus = 50; // oletuksesta poikkeava
  if (paljon_liittymia) {
    var note = createRecycledObject(viewObj, "paljon-liittymia-note", "diagram-model-note", reunusx, juoksevay, noteleveys, notekorkeus);
    note.setText("Liittymien tiedot näet tarkemmin sivun lopun Yhteydet-välilehdeltä");
    juoksevay += notekorkeus + kuviovaliy;
  }

  var prosessit = $("#" + element.id).outRels("serving-relationship").targetEnds("business-process").filter(fth);
  prosessit.sort(tunnistecompare);
  if (prosessit.size() > 0) {
    var note = createRecycledObject(viewObj, "prosessit-note", "diagram-model-note", reunusx, juoksevay, noteleveys, notekorkeus);
    note.setText("Tietojärjestelmää " + element.name + " hyödyntävät prosessit (" + prosessit.size() + " kpl):");
    juoksevay += notekorkeus + kuviovaliy;

    rivillakpl = Math.min(kuvioitamaxrivi, prosessit.size());
    nykyx = 1;
    prosessit.each(function (elem) {
      var aliprosObj = recycledViewAddElement(viewObj, elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
      nykyx++;
      if (nykyx > rivillakpl) {
        nykyx = 1;
        juoksevay += kuvionkorkeus + kuviovaliy;
      }
    });
    if (nykyx > 1) juoksevay += kuvionkorkeus + kuviovaliy;
  }
  juoksevay += kuvionkorkeus + kuviovaliy;

  recycledViewFinishRecycling(viewObj);
  varitaNakyma(nakyma);

  console.log("... luotu.");
}
