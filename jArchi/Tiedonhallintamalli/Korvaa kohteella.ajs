/*
 * Tämä skripti korvaa elementtejä toisella elementillä, siirtäen Tiedonhallintamalliin kuuluvat relaatiot
 * korvattavalta elementiltä korvaavalle elementille. Eli ns. "merge"-toiminto. Olemme käyttäneet tätä
 * tiedon laadun parantamisessa, esim. korvaamaan Excelistä väärin kirjoitulla nimellä tuotu järjestelmäelementti
 * Järjestelmäsalkusta tuodulla elementillä.
 * Toimii tällä hetkellä tietojärjestelmille ja tietovarannoille (voi käyttää myös ristiin).
 * Kysyy ensin ponnahdusikkunassa, mikä valituista elementeistä on se, joksi muut vaihdetaan. Päivittää
 * ja värittää uudelleen sen jälkeen ne näkymät, joilta korvattavat elementit löytyivät.
 */

load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");

console.show();

function korvauscompare(left, right) {
  lefttihla = left.prop("_Tiedonhallintamalli") == "1";
  righttihla = right.prop("_Tiedonhallintamalli") == "1";
  if (lefttihla != righttihla) {
    return lefttihla ? -1 : 1;  // tiedonhallintamalliin kuuluva alkuun
  }
  leftepavir = left.prop("Virallinen") == "F";
  rightepavir = right.prop("Virallinen") == "F";
  if (leftepavir != rightepavir) {
    return leftepavir ? 1 : -1; // virallinen alkuun = epävirallinen loppuun
  }
  if (left.type != right.type) {
     return left.type == 'application-component' ? -1 : 1;  // järjestelmät ennen tietovarantoja
  }
  if (left.type == 'application-component') { // järjestelmien osalta tarkistetaan salkkuun kuuluminen
    leftsalkku = parseInt(left.prop("Järjestelmäsalkku ID")) > 0;
    rightsalkku = parseInt(right.prop("Järjestelmäsalkku ID")) > 0;
    if (leftsalkku != rightsalkku) {
      return leftsalkku ? -1 : 1; // salkussa oleva alkuun
    }
  }
  return namecompare(left,right);  // muuten samanlaiset aakkosjärjestykseen
}

if ($(selection).size() < 2) {
  console.error("Vähintään kahden kohteen oltava valittuna.");
  exit();
}

if ($(selection).size() > 5) {
  console.error("Korkeintaan neljä kohdetta voi korvata kerralla.");
  exit();
}

ekatyyppi = $(selection).first().type;
if (ekatyyppi == 'product' || ekatyyppi == 'application-component') {
  /* if (ekatyyppi == 'business-process') {
    if (!window.confirm("Tätä skriptiä ei ole testattu prosessien korvaamiseen - oletko varma, että haluat kokeilla onneasi?")) exit();
  } */
  // kaikki ok
} else {
  console.error("Vain tietovarantoja tai tietojärjestelmiä voidaan korvata"); // prosesseja, 
  exit();
}

kohteet = $("empty");
$(selection).each(function (kohde) {
  kohde = kohde.concept ? kohde.concept : kohde;
  if (kohde.type != 'application-component' && kohde.type != 'product') {
    console.error("Korvattavien kohteiden pitää olla tietojärjestelmiä tai tietovarantoja.");
    exit();
  }
  kohteet = kohteet.add($("#"+kohde.id));
});

kohteet.sort(korvauscompare);

valittavat = "";
for (i = 0; i < kohteet.size(); i++) {
  kohde = kohteet.get(i);
  valittavat = valittavat + (i+1) + " = " + kohde.name + " [" + kohde.prop("Omistaja") + "] (";
  if (kohde.prop("_Tiedonhallintamalli") == "1") valittavat = valittavat + "Tiedonhallintamallissa ";
  if (kohde.prop("Virallinen") == "F") valittavat = valittavat + "EPÄVIRALLINEN ";
  if (kohde.type == "application-component" && parseInt(kohde.prop("Järjestelmäsalkku ID")) > 0)
    valittavat = valittavat + "Järjestelmäsalkussa ";
  valittavat = valittavat + ")\n";
}

valinta = parseInt(window.prompt("Valitse seuraavista, millä kohteella muut luetellut kohteet korvataan:\n" + valittavat, "1"));

if (!valinta || valinta < 1 || valinta > kohteet.size()) {
  console.log("Korvaaminen peruutettu.");
  exit();
}

korvaava = kohteet.get(valinta-1);
korvattavat = kohteet.not("#"+korvaava.id);

//paivitettavatNakymat = new java.util.HashSet();

console.log(">>> Aletaan korvata kohteeksi: " + korvaava + " [" + korvaava.prop("Omistaja") + "]");
korvattavat.each(function (korvattava) {
  console.log("Korvataan kohdetta " + korvattava + " [" + korvattava.prop("Omistaja") + "]");

  // luodaan uudet relaatiot malliin tai käytetään olemassa olevia jos nimet vastaavat
  //korvrels = new java.util.HashMap();
  $("#"+korvattava.id).inRels().each(function (inrel) {
    if (inrel.type == "association-relationship" && inrel.name == "vastaa") return; // ei huomioida omistaja-relaatioita
    if (inrel.type == "composition-relationship" || inrel.type == "realization-relationship") { // ei muuteta järjestelmäkokonaisuus-/alijärjestelmäsuhteita
      console.log("- Ei muuteta järjestelmäkokonaisuus-/alijärjestelmäsuhdetta: " + inrel.source + " - " + inrel.target);
      return;
    }
    if (inrel.type == "flow-relationship") { // ei muuteta liittymää / tietovirtaa
      console.log("- Ei muuteta liittymää: " + inrel.source + " - " + inrel.target + " (" + inrel.name + ")");
      return;
    }
    korvaavarel = null;
    $("#"+korvaava.id).inRels().each(function (korvinrel) {
      if ((inrel.source.id == korvinrel.source.id) && (inrel.name == korvinrel.name)) {
        console.log("- Löytyi vastaava in-relaatio: " + inrel + " == " + korvinrel + " / " + korvinrel.source + " - " + korvinrel.target);
        korvaavarel = korvinrel;
      }
    });
    if (!korvaavarel) {
      korvaavarel = model.createRelationship(inrel.type, inrel.name, inrel.source, korvaava);
      muuttunutMerkinta(inrel.source);
      console.log("- Luotiin uusi in-relaatio: " + korvaavarel + " / " + korvaavarel.source + " - " + korvaavarel.target);
    }
    muuttunutMerkinta(korvaava, korvattava);
    console.log("- Poistetaan relaatio " + inrel + " / " + inrel.source + " - " + inrel.target);
    inrel.delete();
    //korvrels.put(inrel, korvaavarel);
  });
  $("#"+korvattava.id).outRels().each(function (outrel) {
    if (outrel.type == "composition-relationship" || outrel.type == "realization-relationship") { // ei muuteta järjestelmäkokonaisuus-/alijärjestelmäsuhteita
      console.log("- Ei muuteta järjestelmäkokonaisuus-/alijärjestelmäsuhdetta: " + outrel.source + " - " + outrel.target);
      return;
    }
    if (outrel.type == "flow-relationship") { // ei muuteta liittymiä / tietovirtoja
      console.log("- Ei muuteta liittymää: " + outrel.source + " - " + outrel.target + " (" + outrel.name + ")");
      return;
    }
    korvaavarel = null;
    $("#"+korvaava.id).outRels().each(function (korvoutrel) {
      if ((outrel.target.id == korvoutrel.target.id) && (outrel.name == korvoutrel.name)) {
        console.log("- Löytyi vastaava out-relaatio: " + outrel + " == " + korvoutrel + " / " + korvoutrel.source + " - " + korvoutrel.target);
        korvaavarel = korvoutrel;
      }
    });
    if (!korvaavarel) {
      korvaavarel = model.createRelationship(outrel.type, outrel.name, korvaava, outrel.target);
      muuttunutMerkinta(outrel.target);
      console.log("- Luotiin uusi out-relaatio: " + korvaavarel + " / " + korvaavarel.source + " - " + korvaavarel.target);
    }
    muuttunutMerkinta(korvaava, korvattava);
    console.log("- Poistetaan relaatio " + outrel + " / " + outrel.source + " - " + outrel.target);
    outrel.delete();
    //korvrels.put(outrel, korvaavarel);
  });

  // käydään läpi näkymät, joissa korvattava esiintyy
  /*
    $("view").each(function(view) {
    nakymanelems = new java.util.HashMap();
    $("#"+view.id).children("element").each(function (viewelem) {
      nakymanelems.put(viewelem.concept, viewelem);
    });
    kve = nakymanelems.get(korvattava);
    if (!kve) return; // elementtiä ei ole tässä näkymässä
    console.log("- Korvataan näkymässä " + view);
    paivitettavatNakymat.add(view);

    korvaavave = nakymanelems.get(korvaava);
    if (korvaavave) {
      console.log("  o Kohde löytyi näkymästä: " + korvaavave);
    } else {
      korvaavave = view.add(korvaava, kve.bounds.x, kve.bounds.y, kve.bounds.width, kve.bounds.height);
      nakymanelems.put(korvaava, korvaavave);
      console.log("  o Luotiin uusi kohde näkymään: " + korvaavave);
    }
	
    nakymanrels = new java.util.HashMap();
    $("#"+view.id).children("relationship").each(function (viewrel) {
      nakymanrels.put(viewrel.concept, viewrel);
    });
    $("#"+korvattava.id).rels().each(function (rel) {
      if (rel.type == "association-relationship" && rel.name == "vastaa") return; // ei huomioida omistaja-relaatioita
      if (nakymanrels.get(rel)) {
        // tämä korvattavan relaatio on näkymässä, onko korvaavakin relaatio?
        //console.log("    + Rel: " + rel + " / " + rel.source + " / " + rel.target);
        korvaavarel = korvrels.get(rel);
        if (!korvaavarel) console.error("Korvaavarel on null");
        //console.log("    + Korvaavarel: " + korvaavarel + " / " + korvaavarel.source + " / " + korvaavarel.target);
        if (!nakymanrels.get(korvaavarel)) {
          // korvaava relaatio ei vielä ole näkymässä, lisätään
          nakymansource = nakymanelems.get(korvaavarel.source);
          nakymantarget = nakymanelems.get(korvaavarel.target);
          //console.log("    + Nakymansource: " + nakymansource + " / Nakymantarget: " + nakymantarget);
          newrel = view.add(korvaavarel, nakymansource, nakymantarget);
          nakymanrels.put(korvaavarel, newrel);
          console.log("    - Luotiin uusi relaatio näkymään: " + newrel + " / " + nakymansource + " / " + nakymantarget);
        }
      }
    });

    console.log("  o Poistetaan korvattava näkymäelementti, näkymärelaatiot toivottavasti lähtee sen mukana");
    kve.delete();
  }); */
  // näkymät käyty läpi

  if (window.confirm("Poistetaanko " + korvattava + "?")) {
    console.log("- Poistetaan korvattava elementti " + korvattava);
    korvattava.delete();
  }

});

/* it = paivitettavatNakymat.iterator();
while (it.hasNext()) {
  varitettavaNakyma = it.next();
  load(__SCRIPTS_DIR__ + "~lib/VäritäNäkymä.ajs");
} */

console.log("<<<");
console.log();
