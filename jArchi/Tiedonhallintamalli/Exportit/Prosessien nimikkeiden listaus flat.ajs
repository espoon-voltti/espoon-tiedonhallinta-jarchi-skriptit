/*
 * New Archi Script
 */

"use strict";

console.show();
console.clear();

console.log("> Prosessien nimikkeiden listaus");
load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/papaparse.min.js");
console.log("> Loaded Papa Parse");

function kasitteleProsessit(_prosessit, _taso, _tulostusfunktio) {
  _prosessit.each(function (_pros) {
    _tulostusfunktio(_pros, _taso);
    var _aliprosessit = $("#"+_pros.id).inRels("specialization-relationship").sourceEnds("business-process");
    if (_aliprosessit.size()) {
      _aliprosessit.sort(tunnistecompare);
      kasitteleProsessit(_aliprosessit, _taso + 1, _tulostusfunktio);
    }
  });
}

var prosessimap = {};  // käytetään etsimään hierarkian ulkopuolelle jääviä
$("business-process").filter(fth).each(function (pros) {
  prosessimap[pros.id] = pros;
});

var exportFile = window.promptSaveFile({ title: "Export to CSV", filterExtensions: [ "*.csv" ], fileName: "prosessilista.csv" } );
if (!exportFile) {
  console.log("> Vienti peruttiin");
  exit();
}

console.log("> Tallennetaan CSV");

var csvData = [];
var maxTaso = 0;

var prosessit = $("folder.Business").children("folder.Tiedonhallintamalli").children("folder.Prosessihierarkia").children("business-process");
prosessit.sort(tunnistecompare);
kasitteleProsessit(prosessit, 1, function (pros, taso) {
  console.log(pros.name);
  var datarow = {};
  datarow["Prosessin nimi"] = pros.name;
  csvData.push(datarow);
  delete prosessimap[pros.id];
});

var csvHeaders = ["Prosessin nimi"];
var theCSV = Papa.unparse({fields:csvHeaders, data:csvData});
$.fs.writeFile(exportFile, theCSV);

console.log("> CSV tallennettu");

console.log("> Luetellaan orvot prosessit (ei viedä CSV:hen)");
for (var prosid in prosessimap) {
  console.error("- " + prosessimap[prosid].name);
}

console.log("> Valmis");
console.log();

