/*
/*
 * Luo 360-näkymän Espoon tiedonhallintamalliin kuuluvalle tietojärjestelmälle. Näkymä luodaan 
 * Views > Tiedonhallintamalli > Tietojärjestelmät kansion alikansioon.
 * Luo näkymän kaikille Archin käyttöliittymässä valituille tietojärjestelmille. Valittuna voi myös olla
 * järjestelmien sijaan niiden 360-näkymät, jotka tällöin korvataan. Valittuna voi olla myös kansioita, 
 * jolloin kaikki näiden alla olevat järjestelmät tai järjestelmien 360-näkymät luodaan. Kysyy ennen olemassa 
 * olevien näkymien korvaamista uusilla.
 */

load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");

korvaakaikki = 0;

views = $("folder.Views").first();
tiedonhallintamalliFolder = $("#"+views.id).children("folder.Tiedonhallintamalli").first();
if (tiedonhallintamalliFolder == null) {
  tiedonhallintamalliFolder = views.createFolder("Tiedonhallintamalli");
}
tietojarjestelmatFolder = $("#"+tiedonhallintamalliFolder.id).children("folder.Tietojärjestelmät").first();
if (tietojarjestelmatFolder == null) {
  tietojarjestelmatFolder = tiedonhallintamalliFolder.createFolder("Tietojärjestelmät");
}

console.log(">>> Aloitetaan... " + (new Date()).format("isoDateTime"));
valinta = $("empty");
$(selection).each(function(element) {  // explode relevant folder contents
  if (element.type == "folder") {
    if ($("#"+element.id).parents().filter(function (fol) { return fol.name == "Views"; }).size() > 0) {
      valinta.add($("#"+element.id).find("view"));
    } else {
      valinta.add($("#"+element.id).find("application-component"));
    }
  } else {
    valinta.add($("#"+element.id));
  }
});

valinta.each(function(element) {
  element = element.concept ? element.concept : element;  // jos tultiin näkymän kautta, käsitellään varsinaista elementtiä, ei sen näkymäilmentymää

  if (element.type != 'application-component') {
    if (element.prop("_KuvattavaKohde")) {  // jos valittuna on esim. kaavio, joka kuvaa tiettyä järjestelmää, oletetaan käyttäjän tarkoittavan että haluaa kuvata ko. järjestelmän
      element = $("#"+element.prop("_KuvattavaKohde")).first();
    }
  }

  if (element.type != 'application-component') {
    console.error("Elementti ei ole tietojärjestelmä: " + element);
    return;
  }
  if (!fth(element)) {
    console.log("Ei kuulu tiedonhallintamalliin: " + element);
    return;
  }

  console.log("Luodaan näkymää tietojärjestelmälle " + element.name + "...");

  folder = tietojarjestelmatFolder; 
  omistaja = $("#"+element.id).inRels("association-relationship.vastaa").sourceEnds("business-actor").first();
  if (omistaja) {
    toimiala = omistaja.prop("Toimiala");
    if (!toimiala) toimiala = "Muut";
    if (omistaja.prop("Sisäinen/ulkoinen") == "ulkoinen") toimiala = "Ulkoiset";
    toimialaFolder = $("#"+tietojarjestelmatFolder.id).children("folder." + toimiala).first();
    if (toimialaFolder == null) {
      toimialaFolder = tietojarjestelmatFolder.createFolder(toimiala);
    }
    omistajaFolder = $("#"+toimialaFolder.id).children("folder." + omistaja.name).first();
    if (omistajaFolder == null) {
      omistajaFolder = toimialaFolder.createFolder(omistaja.name);
    }
    folder = omistajaFolder;
  } else if (element.prop("_JärjestelmäsalkunVapaateksti") == "1") {
    folder = $("#"+tietojarjestelmatFolder.id).children("folder.Vapaatekstit Järjestelmäsalkun liittymissä").first();
    if (folder == null) {
      folder = tietojarjestelmatFolder.createFolder("Vapaatekstit Järjestelmäsalkun liittymissä");
    }
  }
  
  onjo = $("view").filter(function (view) { return view.prop("_KuvattavaKohde") == element.id; });
  onjo = onjo.add($("#"+folder.id).children("view." + element.name).not(onjo));
  if (onjo.size() > 0) {
    if (!korvaakaikki) {
      response = window.confirm("Tietojärjestelmällä " + element.name + " on jo näkym(i)ä. Korvataanko? (Muutoin tehdään uusi rinnalle)");
      if (response && valinta.size() > 1) {
         resp2 = window.confirm("Korvataanko kaikki loput? Muutoin kysytään yksitellen.");
         if (resp2) korvaakaikki = 1;
      }
    }
    if (korvaakaikki || response) {
      onjo.each(function (view) { view.delete(); });
    }
  }

  nakyma = model.createArchimateView(element.name, folder);
  nakyma.prop("_KuvattavaKohde", element.id);
  nakyma.prop("_Luotu", (new Date()).format("isoDateTime"));
  nakyma.prop("_Tiedonhallintamalli", "1");
  nakyma.documentation = element.documentation + "\n\n(Klikkaa tietojärjestelmää kuvassa nähdäksesi sen tarkempia ominaisuuksia vasemmalla alhaalla)";
  element.prop("_OmaNäkymä", nakyma.id);
  juoksevay = reunusy;

  tietovarannot = $("#"+element.id).outRels("serving-relationship").targetEnds("product").filter(fthHaving({"_Tietovaranto": "1"}));
  tietovarannot.sort(namecompare);
  tietovarannot.add($("#"+element.id).inRels("composition-relationship").sourceEnds("application-component").filter(fth).not($("#"+element.id)));  // lisätään lopuksi mahd. pääjärjestelmä!
  tietovarantoObjs = [];
  if (tietovarannot.size() > 0) {
    rivillakpl = Math.min(kuvioitamaxrivi, tietovarannot.size());
    nykyx = 1;
    tietovarannot.each(function(elem) {
      tietovarantoObjs.push(nakyma.add(elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus));
      nykyx++;
      if (nykyx > rivillakpl) {
        nykyx = 1;
        juoksevay += kuvionkorkeus + kuviovaliy;
      }
    });
    if (nykyx > 1) juoksevay += kuvionkorkeus + kuviovaliy;
  }

  inputliittymat = $("#"+element.id).inRels("flow-relationship").sourceEnds("application-component").filter(fth);
  inputliittymat.sort(namecompare);
  outputliittymat = $("#"+element.id).outRels("flow-relationship").targetEnds("application-component").filter(fth);
  outputliittymat.sort(tunnistecompare);
  inputliittymat = inputliittymat.not(outputliittymat);  // jos on sekä luku että kirjoitus, näytetään output-liittymien puolella
  liittymanum = Math.max(inputliittymat.size(), outputliittymat.size());
  liittymakorkeus = liittymanum * (kuvionkorkeus + kuviovalix) - kuviovalix;
  liittymakorkeus = Math.max(liittymakorkeus, 2 * kuvionkorkeus); // vähän extra tilaa itse kuvattavalle järjestelmälle

  // lisätään käsillä oleva järjestelmä keskelle
  jarjestelmaObj = nakyma.add(element, keskitax(1,1), keskitay(juoksevay, liittymakorkeus, 1, 1), kuvionleveys, kuvionkorkeus);
  for (i = 0; i < tietovarantoObjs.length; i++) {
    relaatio = $("#"+element.id).outRels("serving-relationship").filter(function(rel) { return rel.target.id == tietovarantoObjs[i].concept.id; }).first();
    if (relaatio) nakyma.add(relaatio, jarjestelmaObj, tietovarantoObjs[i]);
    else {
      // järjestelmäkokonaisuuden pääjärjestelmä
      relaatio = $("#"+element.id).inRels("composition-relationship").filter(function(rel) { return rel.source.id == tietovarantoObjs[i].concept.id; }).first();
      nakyma.add(relaatio, tietovarantoObjs[i], jarjestelmaObj);
    }
  }

  i = 1;
  inputliittymat.each(function(jarj) {
    inputObj = nakyma.add(jarj, reunusx, keskitay(juoksevay, liittymakorkeus, i++, inputliittymat.size()), kuvionleveys, kuvionkorkeus);
    relaatio = $("#"+element.id).inRels("flow-relationship").filter(function(rel) { return rel.source.id == jarj.id; }).first();
    nakyma.add(relaatio, inputObj, jarjestelmaObj);
  });
  i = 1;
  outputliittymat.each(function(jarj) {
    outputObj = nakyma.add(jarj, kokoleveys - reunusx - kuvionleveys, keskitay(juoksevay, liittymakorkeus, i++, outputliittymat.size()), kuvionleveys, kuvionkorkeus);
    relaatio = $("#"+element.id).outRels("flow-relationship").filter(function(rel) { return rel.target.id == jarj.id; }).first();
    nakyma.add(relaatio, jarjestelmaObj, outputObj);
    relaatio = $("#"+element.id).inRels("flow-relationship").filter(function(rel) { return rel.source.id == jarj.id; }).first();
    if (relaatio) nakyma.add(relaatio, outputObj, jarjestelmaObj);
  });
  
  juoksevay += liittymakorkeus + kuviovaliy;

  alijarjestelmat = $("#"+element.id).outRels("composition-relationship").targetEnds("application-component").filter(fth).not($("#"+element.id));
  alijarjestelmat.sort(namecompare);
  rivillakpl = Math.min(kuvioitamaxrivi, alijarjestelmat.size());
  nykyx = 1;
  alijarjestelmat.each(function(elem) {
    alijarjObj = nakyma.add(elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
    relaatio = $("#"+element.id).outRels("composition-relationship").filter(function(rel) { return rel.target.id == elem.id; }).first();
    nakyma.add(relaatio, jarjestelmaObj, alijarjObj);
    nykyx++;
    if (nykyx > rivillakpl) {
      nykyx = 1;
      juoksevay += kuvionkorkeus + kuviovaliy;
    }
  });
  if (nykyx > 1) juoksevay += kuvionkorkeus + kuviovaliy;
  juoksevay += Math.round((kuvionkorkeus + kuviovaliy)/4);

  prosessit = $("#"+element.id).outRels("serving-relationship").targetEnds("business-process").filter(fth);
  prosessit.sort(tunnistecompare);
  if (prosessit.size() > 0) {
    note = nakyma.createObject("diagram-model-note", reunusx, juoksevay, noteleveys, notekorkeus);
    note.setText("Tietojärjestelmää " + element.name + " hyödyntävät prosessit (" + prosessit.size() + " kpl)");
    juoksevay += notekorkeus + kuviovaliy;

    rivillakpl = Math.min(kuvioitamaxrivi, prosessit.size());
    nykyx = 1;
    prosessit.each(function(elem) {
      aliprosObj = nakyma.add(elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
      nykyx++;
      if (nykyx > rivillakpl) {
        nykyx = 1;
        juoksevay += kuvionkorkeus + kuviovaliy;
      }
    });
    if (nykyx > 1) juoksevay += kuvionkorkeus + kuviovaliy;
  }
  juoksevay += kuvionkorkeus + kuviovaliy;

  varitettavaNakyma = nakyma;
  load(__SCRIPTS_DIR__ + "~lib/VäritäNäkymä.ajs");
  
  console.log("... luotu.");

});

console.log("<<<");
console.log("");

