/*
 * New Archi Script
 */

"use strict"; 
load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");

console.show();
console.clear();
console.log("> Tiedonhallintamallin rakenteen validointi");

var maxherjatkysy = 50;

var tunnisteNumeroPattern = /^([OT]|Y[AJP]?)?(\d+(\.|(\.\d+)*))($|[^0-9\.])/;  // prosessien ja tehtäväluokkien yhteinen, ei siten täysin tarkka

var elementtivalidoinnit = {
  "Prosessi": {  // ylläpito IMS:ssä
    tunnista: function (elem) { return elem.type == "business-process" && fth(elem); },
    tarkistukset: [
      tarkistaTunniste,
      etsiDuplikaatit("prosessin tunniste", function (elem) { return elem.prop("Tunniste"); }),
      etsiDuplikaatit("prosessin IMS ID", function (elem) { return elem.prop("IMS ID"); }),
      etsiDuplikaatit("_OmaNäkymä", function (elem) { return elem.prop("_OmaNäkymä"); }),
      tarkistaElementinOmistaja, 
      function (pros) { if (!pros.prop("IMS ID")) return "Prosessilta puuttuu IMS ID"; },
      tarkistaYlaprosessi
    ]
  },
  "Tietovaranto": {  // YLLÄPITO ARCHISSA
    tunnista: function (elem) { return elem.type == "product" && fthHaving({ "_Tietovaranto": "1"})(elem); },
    tarkistukset: [
      etsiDuplikaatit("tietovaranto", function (elem) { return elem.name; }),
      etsiDuplikaatit("_OmaNäkymä", function (elem) { return elem.prop("_OmaNäkymä"); }),
      tarkistaElementinOmistaja
    ]
  },
  "Tietojärjestelmä": {  // ylläpito Järjestelmäsalkussa (pl. karkulaiset)
    tunnista: function (elem) { return elem.type == "application-component" && fth(elem); },
    tarkistukset: [
      etsiDuplikaatit("tietojärjestelmän nimi", function (elem) { if (elem.prop("_JärjestelmäsalkunVapaateksti") != "1") return elem.name; }),
      etsiDuplikaatit("tietojärjestelmän Järjestelmäsalkku ID", function (elem) { return elem.prop("Järjestelmäsalkku ID"); }),
      etsiDuplikaatit("tietojärjestelmän Tiedonhallintamalli ID", function (elem) { return elem.prop("Tiedonhallintamalli ID"); }),
      etsiDuplikaatit("_OmaNäkymä", function (elem) { return elem.prop("_OmaNäkymä"); }),
      function (elem) { if (elem.prop("_JärjestelmäsalkunVapaateksti") != "1") return tarkistaElementinOmistaja(elem); },
      function (elem) { if (!elem.prop("Järjestelmäsalkku ID") && !elem.prop("Tiedonhallintamalli ID") && !elem.prop("_JärjestelmäsalkunVapaateksti")) return "Tietojärjestelmällä ei ole asetettuna Järjestelmäsalkku ID eikä Tiedonhallintamalli ID"; },
      function (elem) { if (elem.prop("Järjestelmäsalkku ID") && elem.prop("Tiedonhallintamalli ID")) return "Tietojärjestelmällä on asetettuna sekä Järjestelmäsalkku ID että Tiedonhallintamalli ID"; },
      function (elem) { if (elem.prop("Tiedonhallintamalli ID")) { if (! /^TH(\d{3,})$/.exec(elem.prop("Tiedonhallintamalli ID"))) return "Virheellinen Tiedonhallintamalli ID: " + elem.prop("Tiedonhallintamalli ID"); } }
    ]
  },
  "Tehtäväluokka": {  // ylläpito TOJ:ssa
    tunnista: function (elem) { return elem.type == "business-function" && fth(elem); },
    tarkistukset: [
      tarkistaTunniste,
      etsiDuplikaatit("tehtäväluokan tunniste", function (elem) { return elem.prop("Tunniste"); }),
      etsiDuplikaatit("_OmaNäkymä", function (elem) { return elem.prop("_OmaNäkymä"); }),
      tarkistaYlatehtavaluokka
    ]
  },
  "Tietosuojaseloste": {  // ylläpito Archissa rakenteisena tietona, varsinainen master on Espoo.fi sivustolla julkaistut selosteet - Archin tietojen päivitys manuaalista
    tunnista: function (elem) { return elem.type == "representation" && fth(elem); },
    tarkistukset: [
      etsiDuplikaatit("tietosuojaseloste", function (elem) { return elem.name; }),
      tarkistaElementinOmistaja
    ]
  },
  "Organisaatio": {  // YLLÄPITO ARCHISSA (lähteenä hallintosääntö ja toimintaohjeet)
    tunnista: function (elem) { return elem.type == "business-actor" && fth(elem); },
    tarkistukset: []
  }
};

var relaatioduplikaatit = etsiDuplikaatit("relaatio",
  function (rel) { return rel.type + "/" + rel.source.id + "/" + rel.target.id; }
);

var relaatiovalidoinnit = {
  "Tiedonhallintamallin elementin omistaa organisaatio": {
    tunnista: function (rel) { return rel.type == "association-relationship" && rel.name == "vastaa" && tunnistaElementti(rel.source) == "Organisaatio" && tunnistaElementti(rel.target); },
    tarkistukset: [relaatioduplikaatit]
  },
  "Prosessin syöte prosessille": {  // ylläpito IMS:ssä
    tunnista: function (rel) { return rel.type == "flow-relationship" && tunnistaElementti(rel.source) == "Prosessi" && tunnistaElementti(rel.target) == "Prosessi"; },
    tarkistukset: [
      relaatioduplikaatit,
      tarkistaSyote
    ]
  },
  "Prosessin aliprosessi": {  // ylläpito IMS:ssä
    tunnista: function (rel) { return rel.type == "specialization-relationship" && tunnistaElementti(rel.source) == "Prosessi" && tunnistaElementti(rel.target) == "Prosessi"; },
    tarkistukset: [relaatioduplikaatit]
  },
  "Prosessissa hyödynnetään tietovarantoa": {  // YLLÄPITO ARCHISSA
    tunnista: function (rel) { return rel.type == "serving-relationship" && tunnistaElementti(rel.source) == "Tietovaranto" && tunnistaElementti(rel.target) == "Prosessi"; },
    tarkistukset: [relaatioduplikaatit]
  },
  "Prosessissa hyödynnetään tietojärjestelmää": {  // YLLÄPITO ARCHISSA
    tunnista: function (rel) { return rel.type == "serving-relationship" && tunnistaElementti(rel.source) == "Tietojärjestelmä" && tunnistaElementti(rel.target) == "Prosessi"; },
    tarkistukset: [relaatioduplikaatit]
  },
  "Prosessi palvelee tehtäväluokkaa": {  // ylläpito TOJ:ssa
    tunnista: function (rel) { return rel.type == "serving-relationship" && tunnistaElementti(rel.source) == "Prosessi" && tunnistaElementti(rel.target) == "Tehtäväluokka"; },
    tarkistukset: [relaatioduplikaatit]
  },
  "Tietovaranto palvelee tehtäväluokkaa": {  // ylläpito TOJ:ssa
    tunnista: function (rel) { return rel.type == "serving-relationship" && tunnistaElementti(rel.source) == "Tietovaranto" && tunnistaElementti(rel.target) == "Tehtäväluokka"; },
    tarkistukset: [relaatioduplikaatit]
  },
  "Tietojärjestelmä palvelee tehtäväluokkaa": {  // ylläpito TOJ:ssa
    tunnista: function (rel) { return rel.type == "serving-relationship" && tunnistaElementti(rel.source) == "Tietojärjestelmä" && tunnistaElementti(rel.target) == "Tehtäväluokka"; },
    tarkistukset: [relaatioduplikaatit]
  },
  "Tietojärjestelmä palvelee tietovarantoa": {  // YLLÄPITO ARCHISSA
    tunnista: function (rel) { return rel.type == "serving-relationship" && tunnistaElementti(rel.source) == "Tietojärjestelmä" && tunnistaElementti(rel.target) == "Tietovaranto"; },
    tarkistukset: [relaatioduplikaatit]
  },
  "Tietojärjestelmien välinen liittymä": {  // ylläpito Järjestelmäsalkussa (pl. karkulaiset?)
    tunnista: function (rel) { return rel.type == "flow-relationship" && fth(rel) && tunnistaElementti(rel.source) == "Tietojärjestelmä" && tunnistaElementti(rel.target) == "Tietojärjestelmä"; },
    tarkistukset:  [ ] // [etsiDuplikaatit("liittymän riippuvuus-id", function (rel) { return rel.prop("Riippuvuus-ID"); })]  // ei voida käyttää relaatioduplikaatit-tarkistusta koska voi olla useampi eri tietovirta samojen järjestelmien välillä
  },
  "Järjestelmäkokonaisuuteen kuuluva tietojärjestelmä": {  // ylläpito Järjestelmäsalkussa
    tunnista: function (rel) { return rel.type == "composition-relationship" && tunnistaElementti(rel.source) == "Tietojärjestelmä" && tunnistaElementti(rel.target) == "Tietojärjestelmä"; },
    tarkistukset: [relaatioduplikaatit]
  },
  "Tehtäväluokan alitehtäväluokka": {  // ylläpito TOJ:ssa
    tunnista: function (rel) { return rel.type == "specialization-relationship" && tunnistaElementti(rel.source) == "Tehtäväluokka" && tunnistaElementti(rel.target) == "Tehtäväluokka"; },
    tarkistukset: [relaatioduplikaatit]
  },
  "Tietosuojaselosteen tietovarannot": {  // YLLÄPITO ARCHISSA
    tunnista: function (rel) { return rel.type == "association-relationship" && tunnistaElementti(rel.source) == "Tietosuojaseloste" && tunnistaElementti(rel.target) == "Tietovaranto"; },
    tarkistukset: [relaatioduplikaatit]
  },
  "Vapaatekstien metsästys": {  // YLLÄPITO TOISTAISEKSI ARCHISSA
    tunnista: function (rel) { return rel.type == "realization-relationship" && tunnistaElementti(rel.source) == "Tietojärjestelmä" && tunnistaElementti(rel.target) == "Tietojärjestelmä"; },
    tarkistukset: [
      relaatioduplikaatit,
      function (rel) {
        if (rel.target.prop("_JärjestelmäsalkunVapaateksti") != "1") return "Relaation kohde ei ole Järjestelmäsalkun vapaateksti";
      }
    ]
  },
  "Organisaation aliorganisaatio": {  // YLLÄPITO ARCHISSA (lähteenä hallintosääntö ja toimintaohjeet)
    tunnista: function (rel) { return rel.type == "aggregation-relationship" && tunnistaElementti(rel.source) == "Organisaatio" && tunnistaElementti(rel.target) == "Organisaatio"; },
    tarkistukset: [relaatioduplikaatit]
  },
}

var duplikaatit = {};

function etsiDuplikaatit(_nimi, _arvofunktio) {
  return (function () {
    var nimi = _nimi;
    var arvofunktio = _arvofunktio;
    return function (elem) {
      if (!duplikaatit[nimi]) duplikaatit[nimi] = {};
      var arvo = arvofunktio(elem)
      if (!arvo) return;  // ohitetaan tyhjät
      if (duplikaatit[nimi][arvo]) {
        var dupelem = $("#" + duplikaatit[nimi][arvo]).first();
        return {
          herja: "Duplikaatti " + nimi,
          kohde: dupelem
        }
      }
      duplikaatit[nimi][arvo] = elem.id;
    }
  })();
}

function tarkistaTunniste(elem) {
  var tunniste = elem.prop("Tunniste");
  if (!tunniste) {
    return "Tunniste puuttuu";
  } else if (elem.name.search(tunniste) != 0) {
    return "Tunniste ei vastaa nimen alkua, tunniste: " + tunniste;
  }
  if (!tunnisteNumeroPattern.exec(tunniste)) return "Tunniste ei ole oikean muotoinen";
}

function tarkistaElementinOmistaja(elem) {
  var omistajat = $("#" + elem.id).inRels("association-relationship.vastaa").sourceEnds("business-actor").filter(fth);
  if (!omistajat || omistajat.size() < 1) return "Omistava organisaatio puuttuu";
  if (omistajat.size() > 1) return "USEITA OMISTAVIA ORGANISAATIOITA MERKITTY";
  var omistaja = omistajat.first();
  if (!omistaja) return "omistaja undefined " + omistajat; // HÄH
  if (elem.prop("Omistaja") && elem.prop("Omistaja") != omistaja.name) {
    return "Omistajan nimi eroaa Omistaja-tiedosta kohteella, [" + omistaja.name + "] vs. [" + elem.prop("Omistaja") + "]";
  }
}

function tarkistaYlaelementti(elem, ylafunktio, sanat) {
  var ylaelems = ylafunktio(elem);
  if (ylaelems.size() <= 0) return;
  if (ylaelems.size() > 1) return "Useita " + sanat[0];
  var ylaelem = ylaelems.first();
  var alatunniste = elem.prop("Tunniste");
  var ylatunniste = ylaelem.prop("Tunniste");
  if (!alatunniste || !ylatunniste) return;
  var alamatch = tunnisteNumeroPattern.exec(alatunniste);
  var ylamatch = tunnisteNumeroPattern.exec(ylatunniste);
  if (alamatch && ylamatch && alamatch[2].indexOf(ylamatch[2]) != 0)
    return { herja: sanat[1] + " tunniste ei täsmää yläprosessin tunnisteen kanssa", kohde: ylaelem };
  /* var parent = $("#" + elem.id).parent().first();
  if (ylaelem.name != parent.name)
    return { herja: sanat[2] + " on kansiossa, jonka nimi ei vastaa yläprosessin nimeä", kohde: ylaelem }; */
}

function tarkistaYlaprosessi(elem) {
  return tarkistaYlaelementti(elem,
    function (elem) { return $("#" + elem.id).outRels("specialization-relationship").targetEnds("business-process").filter(fth); },
    ["yläprosesseja", "Prosessin", "Prosessi"]
  );
}

function tarkistaYlatehtavaluokka(elem) {
  return tarkistaYlaelementti(elem,
    function (elem) { return $("#" + elem.id).outRels("specialization-relationship").targetEnds("business-function").filter(fth); },
    ["ylätehtäväluokkia", "Tehtäväluokan", "Tehtäväluokka"]
  );
}

function tarkistaSyote(rel) {
  var lahdeTuottaa = null2e(rel.source.prop("Tuottaa syötteitä"));
  var kohdeSaa = null2e(rel.target.prop("Saa syötteitä"));
  if ((lahdeTuottaa.indexOf(rel.target.prop("Tunniste")) < 0) &&
    (kohdeSaa.indexOf(rel.source.prop("Tunniste")) < 0)) {
    return "Syötteen tunnistetta ei löydy lähteeltä eikä kohteelta (Tuottaa syötteitä = \"" + lahdeTuottaa + "\", Saa syötteitä = \"" + kohdeSaa + "\")";
  }
}

function tunnistaElementti(elem) {
  for (var laji in elementtivalidoinnit) {
    if (elementtivalidoinnit[laji].tunnista(elem)) return laji;
  }
}

function tunnistaRelaatio(rel) {
  for (var laji in relaatiovalidoinnit) {
    if (relaatiovalidoinnit[laji].tunnista(rel)) return laji;
  }
}

function tulostaPolku(elem) {
  var parent = $("#" + elem.id).parent().first();
  if (elem.type != "folder") return tulostaPolku(parent);
  if (parent.type != "folder") parent = null;
  return (parent ? tulostaPolku(parent) + " / " : "") + elem.name;
}

function tulostaKohde(elem) {
  if (elem.type.indexOf("relationship") >= 0) {  // kyseessä on relaatio
    var rel = elem;
    return rel + " elementistä " + rel.source + " (" + tulostaPolku(rel.source) + ") elementtiin " + rel.target + " (" + tulostaPolku(rel.target) + ")";
  } else {  // tavallinen elementti
    return elem + " (" + tulostaPolku(elem) + ")";
  }
}

function tulosta(elem) {
  return ".";
}

/*
function lisaaLahde(rel) {
  rel.prop("Lähde", "Vuoden 2020 prosessiexcel")
}
*/

var laskuri = 0;

console.log("> Validoidaan elementit");
console.log();

$("element").each(function (elem) {
  var laji = tunnistaElementti(elem);
  if (laji) {
    var tarkistukset = elementtivalidoinnit[laji].tarkistukset;
    for (var i = 0; i < tarkistukset.length; i++) {
      var herja = tarkistukset[i](elem);
      if (herja) {
        laskuri++;
        if (typeof herja == "string") herja = { "herja": herja };
        console.log(laskuri + ". " + herja.herja + ", elementti " + tulostaKohde(elem) + (herja.kohde ? ", kohde " + tulostaKohde(herja.kohde) : ""));
        console.log();
      }
    }
  } else {
    laskuri++;
    console.log(laskuri + ". Tiedonhallintamalliin kuulumaton elementti " + tulostaKohde(elem));
    console.log();
  }
  if (laskuri > 0 && laskuri % maxherjatkysy == 0) {
    if (!window.confirm("Jatketaanko yhä validointia?")) exit();
  }
});

console.log("> Validoidaan relaatiot");
console.log();

$("relationship").each(function (rel) {
  var laji = tunnistaRelaatio(rel);
  if (laji) {
    var tarkistukset = relaatiovalidoinnit[laji].tarkistukset;
    for (var i = 0; i < tarkistukset.length; i++) {
      /*if (typeof tarkistukset[i] != "function") {
        console.log(typeof tarkistukset[i] + " " + tarkistukset[i]);
      }*/
      var herja = tarkistukset[i](rel);
      if (herja) {
        laskuri++;
        if (typeof herja == "string") herja = { "herja": herja };
        console.log(laskuri + ". " + herja.herja + ", relaatio " + tulostaKohde(rel) + (herja.kohde ? ", kohde " + tulostaKohde(herja.kohde) : ""));
        console.log();
      }
    }
  } else {
    laskuri++;
    console.log(laskuri + ". Tiedonhallintamalliin kuulumaton relaatio " + tulostaKohde(rel));
    console.log();
  }
  if (laskuri > 0 && laskuri % maxherjatkysy == 0) {
    if (!window.confirm("Jatketaanko yhä validointia?")) exit();
  }
});

console.log("> Valmis");
console.log();
