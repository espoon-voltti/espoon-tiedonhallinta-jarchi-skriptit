/*
 * Luetaan sisään Dynastyn XML-export JSON-muotoon käännettynä.
 * JSON:iksi kääntäminen onnistuu pythonilla, ks. xmltojson.py näiden skriptien Github-repositorion juuressa. Ajetaan esim. komennolla:
 *   python xmltojson.py "Espoon tos 12.3.2024.xml" tos-20240312.json
 * Ko. skriptin ajamiseksi pitää olla asennettuna pythonin xmltodict-moduli, asennus komennolla: pip install xmltodict
 */

"use strict";

load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");

var prosessiTunnistePattern = /^(([OT]|Y[AJP]?)?\d+\.(\d+|\d+(\.\d+)*)?)($|[^0-9\.])/;
var tietojarjestelmaTunnistePattern = /\((\w+)\)\s*$/;

var tehtavaluokanMetadatat = {
  "Prosessitunnus": 1,
  "Tietojärjestelmä": 1,
  // "Tietovaranto": 1   // tehtäväluokan metadatoissa ei ole tietovarantotietoa
}

var dokumentinMetadatat = {
  "Arkistoinnin lisätietoja": null,
  "Arkistointitapa": null,
  //"Asiakirjan tyyppi": null,
  "Asiakirjatyypin tarkenne (=asiakirjallinen tieto)": null,
  "Henkilötietoluonne": null,
  "Hävitystapa": null,
  "Julkisuusluokka": null,
  //"Prosessitunnus": 1,  // asiakirjatyypin metadatoissa ei ole prosessitunnusta
  "Salassapitoaika": null,
  "Salassapitoperuste": null,
  "Siirretäänkö säilytysajan jälkeen arkistoon": null,
  "Säilytyksen lisätietoja": null,
  "Säilytysaika": null,
  "Säilytysajan peruste": null,
  "Säilytysajan laskentaperuste": null,
  "Säilytystapa": null,
  //"Tiedonhallinta": null,
  "Tietojärjestelmä": 1,
  "Tietosisällön kuvailu": null,
  "Tietovaranto": 1
}

function muotoileVuosi(arvo) {
  if (+arvo) return arvo + " vuotta";  // jos pelkkä numero, lisätään perään teksti "vuotta"
  return arvo;
}

var metadatanMuotoilijat = {
  "Salassapitoaika": muotoileVuosi,
  "Säilytysaika": muotoileVuosi
};

function ensureArray(obj) {
  if (Array.isArray(obj)) return obj;
  return [obj];
}

function lueMetadataInfot(infoelem) {
  var metadatamap = {};
  var metadatat = ensureArray(infoelem["MetaInfoNew"]);
  for (var i = 0; i < metadatat.length; i++) {
    var metadataName = metadatat[i]["Title"];
    var valuemap = {};
    //valuemap.nimike = metadatat[i]["Title"];  // turha, onko käytössä?
    valuemap.tyyppi = metadatat[i]["DataType"];
    var choiceSet = metadatat[i]["ChoiceSet"];
    if (choiceSet) {
      var choices = ensureArray(choiceSet["MetadataChoice"]);
      for (var j = 0; j < choices.length; j++) {
        valuemap[choices[j]["ChoiceId"]] = /^[^|]*/.exec(choices[j]["ChoiceDisplayText"])[0];
      }
    }
    metadatamap[metadataName] = valuemap;
    //console.log(metadataName)
    //console.log(valuemap);
  }
  //console.log();
  return metadatamap;
}

function muotoileTieto(tunniste, metadatavalues, metadatamap, palautataulukko) {
  var metadatainfo = metadatamap[tunniste];
  var muotoilija = metadatanMuotoilijat[tunniste];
  var arvo = metadatavalues[tunniste];
  if (arvo && metadatainfo.tyyppi == "Choice") {
    arvo = metadatainfo[arvo];
  } else if (arvo && metadatainfo.tyyppi == "Multichoice") {
    var arvot1 = arvo.split("|");
    arvo = [];
    for (var i = 0; i < arvot1.length; i++) {
      arvo.push(metadatainfo[arvot1[i]] ? metadatainfo[arvot1[i]] : arvot1[i]);
    }
  }
  if (arvo && muotoilija) arvo = muotoilija(arvo);
  if (!palautataulukko && arvo && Array.isArray(arvo)) {
    var teksti = "";
    for (var i = 0; i < arvo.length; i++) {
      if (i > 0) teksti += ", ";
      teksti += arvo[i];
    }
    arvo = teksti;
  }
  return arvo ? arvo : (palautataulukko ? [] : "");
}

function kohteenTila(kohde) {
  if (!kohde["Metadatas"]) return 0;
  if (!kohde["Metadatas"]["XMetadata"]) return 0;

  var metadatat = ensureArray(kohde["Metadatas"]["XMetadata"]);
  for (var j = 0; j < metadatat.length; j++) {
    if (metadatat[j]["MetadataName"] == "ItemStatus") {
      return +metadatat[j]["Value"];  // +:lla tarkoitus muuttaa kokonaisluvuksi
    }
  }
  return 0;
}

function onkoKohteenTilaOhitettava(kohde, kohteentyyppi = "tuntematon") {
  /* var itemStatus = kohteenTila(kohde);
  if (itemStatus == 1 || itemStatus == 2) {
    console.log("> Ohitetaan " + kohteentyyppi + " " + kohde["Title"] + ", koska kohteen tila on " + itemStatus);
    return true;
  }*/  // ei ohiteta mitään
  return false;
}

function parsiPvm(pvm) {
  var pvmPattern1 = /(\d+)\.(\d+)\.(\d+)\s(\d+):(\d+):(\d+)/g;
  var match = pvmPattern1.exec(pvm);
  if (match) return new Date(match[3], match[2] - 1, match[1], match[4], match[5], match[6], 0);
  var pvmPattern2 = /(\d+)-(\d+)-(\d+)\s(\d+):(\d+):(\d+)/g;
  var match = pvmPattern2.exec(pvm);
  if (match) return new Date(match[1], match[2] - 1, match[3], match[4], match[5], match[6], 0);
  return null;
}

console.show();
console.clear();
console.log("> Tiedonohjaus JSON import");
model.purpose;  // feilataan nyt jos mallia ei valittuna

var tossit = [];
while (true) {
  var filePath = window.promptOpenFile({
    title: "Avaa tiedonohjaussuunnitelma JSON, cancel jos ei lisää",
    filterExtensions: ["*.json"], fileName: "tiedonohjaus.json"
  });
  if (!filePath) break;
  tossit.push({ file: filePath });
}
if (!tossit.length) {
  console.log("> Cancelled");
  exit();
}

var businessFolder = $("folder.Business").first();
var tiedonhallintamalliFolder = $("#" + businessFolder.id).children("folder.Tiedonhallintamalli").first();
if (tiedonhallintamalliFolder == null) {
  tiedonhallintamalliFolder = views.createFolder("Tiedonhallintamalli");
}
var tehtavaluokatFolder = $("#" + tiedonhallintamalliFolder.id).children("folder.Tehtäväluokat").first();
if (tehtavaluokatFolder == null) {
  tehtavaluokatFolder = tiedonhallintamalliFolder.createFolder("Tehtäväluokat");
}

var tehtavaluokkaMap = {};
$("business-function").filter(fth).each(function (bf) {
  var tehtavaluokka = bf.prop("Tunniste");
  if (!tehtavaluokka) return;
  tehtavaluokkaMap[tehtavaluokka] = { elem: bf };
});

var aikaleima = new Date().format("isoDateTime");
var uusinmuutos;

for (var h = 0; h < tossit.length; h++) {
  console.log("> Starting reading file " + tossit[h].file + "...");
  var jsontext = "";
  var br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(tossit[h].file), "UTF-8"));
  var x;
  while (x = br.readLine()) {
    jsontext += x + "\n";
  }
  br.close();

  var obj = JSON.parse(jsontext);

  //console.log("CASEGROUP METADATA");
  var casegroupmetadatamap = lueMetadataInfot(obj["XExportNew"]["CasegroupMetadataInfo"]);
  for (var metadataname in tehtavaluokanMetadatat) {
    if (!(metadataname in casegroupmetadatamap)) {
      console.error(tossit[h].file + ":ssa ei löydy tehtäväluokan metatietotyyppiä " + metadataname);  // infotaan, sinänsä ei seuraa muuta kuin että näitä ei sitten tule 
    }
  }
  //console.log("DOCUMENT METADATA");
  var docmetadatamap = lueMetadataInfot(obj["XExportNew"]["DocumentMetadataInfo"]);
  for (var metadataname in dokumentinMetadatat) {
    if (!(metadataname in docmetadatamap)) {
      console.error(tossit[h].file + ":ssa ei löydy dokumentin metatietotyyppiä " + metadataname);  // infotaan, sinänsä ei seuraa muuta kuin että näitä ei sitten tule 
    }
  }

  var taskmap = {};
  var tehtluokat = ensureArray(obj["XExportNew"]["CasegroupHierarchy"]["XCasegroupNew"]);
  for (var i = 0; i < tehtluokat.length; i++) {
    var tehtluokkakoodi = tehtluokat[i]["FullCasegroupCode"];
    if (onkoKohteenTilaOhitettava(tehtluokat[i], "tehtäväluokka " + tehtluokkakoodi)) continue;
    //var debug = (tehtluokkakoodi.startsWith("12.06"));
    var kohteenTilaEtuliite = "";
    switch (kohteenTila(tehtluokat[i])) {
      case 1:
        kohteenTilaEtuliite = "(L) ";
        break;
      case 2:
        kohteenTilaEtuliite = "(S) ";
        break;
    }
    var nimike = kohteenTilaEtuliite + tehtluokat[i]["Title"];
    //var muutos = [];
    console.log(tehtluokkakoodi + " " + nimike);

    var tehtluokkaitem = tehtavaluokkaMap[tehtluokkakoodi];
    //debug? console.log("Ennen: " + JSON.stringify(tehtluokkaitem)) :"";
    var tehtluokka;
    if (tehtluokkaitem) {
      tehtluokka = tehtluokkaitem.elem;
      var saatunimi = tehtluokkakoodi + " " + nimike;
      if (tehtluokka.name != saatunimi) {
        console.log("- Tehtäväluokan nimi muuttuu: " + tehtluokka.name + " -> " + saatunimi);
        tehtluokka.name = saatunimi;
        muuttunutMerkinta(tehtluokka, null, aikaleima);  // näkymän nimen muutos
        //muutos.push("Nimi");
      }
    } else {
      var kansio = tehtavaluokatFolder;
      var parentkoodi = tehtluokat[i]["ParentFullCasegroupCode"];
      var parentluokka = null;
      if (parentkoodi && !/^\d\d$/.exec(tehtluokkakoodi)) {  // muu kuin päätason tehtäväluokka
        parentluokka = tehtavaluokkaMap[parentkoodi];
        if (!parentluokka) {
          console.error("Tehtäväluokan " + tehtluokkakoodi + " " + nimike + " yläluokkaa " + parentkoodi + " ei löydy, ohitetaan");
          continue;
        }
        parentluokka = parentluokka.elem;
        var parentkansio = $("#" + parentluokka.id).parent().first();
        if (/^\d\d(\.\d\d){4,}$/.exec(tehtluokkakoodi)) {
          kansio = parentkansio;
        } else {
          kansio = $("#" + parentkansio.id).children("folder").filter(function (fld) {
            return fld.prop("Tunniste") == parentkoodi;
          }).first();
          if (!kansio) {
            kansio = parentkansio.createFolder(parentluokka.name);
            kansio.prop("Tunniste", parentkoodi);
          }
        }
      }
      tehtluokka = model.createElement("business-function", tehtluokkakoodi + " " + nimike, kansio);
      tehtluokka.prop("_Tiedonhallintamalli", "1");
      tehtluokka.prop("Tunniste", tehtluokkakoodi);
      tehtluokka.prop("_Päivitetty", aikaleima);
      if (parentluokka) {
        model.createRelationship("specialization-relationship", "", tehtluokka, parentluokka);
        muuttunutMerkinta(tehtluokka, parentluokka, aikaleima);
      }
      tehtluokkaitem = { elem: tehtluokka };
      tehtavaluokkaMap[tehtluokkakoodi] = tehtluokkaitem;
      console.log("- Lisättiin tehtäväluokka " + tehtluokka + " kansioon " + kansio);
    }

    tehtluokkaitem.loytyi = true;
    tehtluokkaitem.prosessit = {};
    tehtluokkaitem.tietovarannot = {};
    tehtluokkaitem.tietojarjestelmat = {};

    var metadatavalues1 = {};
    var metadatat = ensureArray(tehtluokat[i]["Metadatas"]["XMetadata"]);
    for (var j = 0; j < metadatat.length; j++) {
      if (metadatat[j]["MetadataName"] == "EventTime") {
        var paivitysPvm = parsiPvm(metadatat[j]["Value"]);
        uusinmuutos = uusinmuutos ? (paivitysPvm > uusinmuutos ? paivitysPvm : uusinmuutos) : paivitysPvm;
      }
      if (tehtavaluokanMetadatat[metadatat[j]["Title"]] && metadatat[j]["Value"]) {
        metadatavalues1[metadatat[j]["Title"]] = metadatat[j]["Value"];
        if (metadatat[j]["Title"] == "Prosessitunnus") {
          var prosessitunnukset = muotoileTieto(metadatat[j]["Title"], metadatavalues1, casegroupmetadatamap, true);
          for (var n = 0; n < prosessitunnukset.length; n++) tehtluokkaitem.prosessit[prosessitunnukset[n]] = 1;
        }
        if (metadatat[j]["Title"] == "Tietojärjestelmä") {
          var tietojarjestelmat = muotoileTieto(metadatat[j]["Title"], metadatavalues1, casegroupmetadatamap, true);
          for (var n = 0; n < tietojarjestelmat.length; n++) tehtluokkaitem.tietojarjestelmat[tietojarjestelmat[n]] = 1;
        }
      }
    }

    var tasks = tehtluokat[i]["Tasks"];
    if (tasks) {
      //debug? console.log("Joo " + tehtluokkakoodi) :"";
      //debug? console.log(tasks) :"";

      var kasittelyvaiheet = tehtluokkaitem.kasittelyvaiheet;
      if (!kasittelyvaiheet) {
        kasittelyvaiheet = tehtluokkaitem.kasittelyvaiheet = {};
        tehtluokkaitem.jarjestys = []; // tallennetaan käsittelyvaiheiden nimet myös kohtaamisjärjestyksessä (tulostusjärjestys)
      }
      var tehtavat = ensureArray(tasks["XTaskNew"]);
      //debug? console.log(tehtavat) :"";
      for (var j = 0; j < tehtavat.length; j++) {
        if (onkoKohteenTilaOhitettava(tehtavat[j], "käsittelyvaihe")) continue;
        //debug? console.log("j = " + j) :"";
        //debug? console.log(tehtavat[j]) :"";
        taskmap[tehtavat[j]["Id"]] = tehtavat[j];
        var tehtavanimi = tehtavat[j]["Title"];
        var doctypesroot = tehtavat[j]["DocumentTypes"];
        var parent = taskmap[tehtavat[j]["ParentId"]];
        var parentnimi = parent ? parent["Title"] : undefined;
        if (parentnimi) tehtavanimi = parentnimi;  // käytetään parent-nimeä, jos on
        var doktyypit = kasittelyvaiheet[tehtavanimi];
        if (!doktyypit) {
          doktyypit = kasittelyvaiheet[tehtavanimi] = [];
          tehtluokkaitem.jarjestys.push(tehtavanimi);
        }
        if (doctypesroot) {
          var doctypes = ensureArray(doctypesroot["XDocumentTypeNew"]);
          for (var k = 0; k < doctypes.length; k++) {
            if (onkoKohteenTilaOhitettava(doctypes[k], "tehtäväluokan " + tehtluokkakoodi + " asiakirjatyyppi")) continue;
            var metadatavalues = {};
            var metadatat = ensureArray(doctypes[k]["Metadatas"]["XMetadata"]);
            var kohteenTilaEtuliite = "";
            switch (kohteenTila(tehtluokat[i])) {
              case 1:
                kohteenTilaEtuliite = "(Luonnos) ";
                break;
              case 2:
                kohteenTilaEtuliite = "(Syötössä) ";
                break;
            }
            for (var l = 0; l < metadatat.length; l++) {
              //debug? console.log("l = " + l) :"";
              //debug? console.log(metadatat[l]) :"";
              if (metadatat[l]["Title"] in dokumentinMetadatat) {
                if (metadatat[l]["Title"] == "Asiakirjatyypin tarkenne (=asiakirjallinen tieto)" && kohteenTilaEtuliite) {
                  metadatavalues[metadatat[l]["Title"]] = kohteenTilaEtuliite + metadatat[l]["Value"];
                } else {
                  metadatavalues[metadatat[l]["Title"]] = metadatat[l]["Value"];
                }
              }
              if (metadatat[l]["MetadataName"] == "EventTime") {
                var paivitysPvm = parsiPvm(metadatat[l]["Value"]);
                uusinmuutos = uusinmuutos ? (paivitysPvm > uusinmuutos ? paivitysPvm : uusinmuutos) : paivitysPvm;
              }
            }
            for (var l = 0; l < metadatat.length; l++) {
              if (!metadatat[l]["Value"]) continue;
              if (metadatat[l]["Title"] == "Tietovaranto") {
                var tietovarannot = muotoileTieto(metadatat[l]["Title"], metadatavalues, docmetadatamap, true);
                for (var n = 0; n < tietovarannot.length; n++) tehtluokkaitem.tietovarannot[tietovarannot[n]] = 1;
              }
              if (metadatat[l]["Title"] == "Tietojärjestelmä") {
                var tietojarjestelmat = muotoileTieto(metadatat[l]["Title"], metadatavalues, docmetadatamap, true);
                for (var n = 0; n < tietojarjestelmat.length; n++) tehtluokkaitem.tietojarjestelmat[tietojarjestelmat[n]] = 1;
              }
            }
            doktyypit.push(metadatavalues);
          }
        }
      }
    }
    //debug? console.log("Jälk: " + JSON.stringify(tehtluokkaitem)) :"";
    //if (Object.keys(tehtluokkaitem.prosessit).length) console.log("  - prosessit: " + JSON.stringify(Object.keys(tehtluokkaitem.prosessit)));
    //if (Object.keys(tehtluokkaitem.tietovarannot).length) console.log("  - tietovarannot: " + JSON.stringify(Object.keys(tehtluokkaitem.tietovarannot)));
    //if (Object.keys(tehtluokkaitem.tietojarjestelmat).length) console.log("  - tietojärjestelmät: " + JSON.stringify(Object.keys(tehtluokkaitem.tietojarjestelmat)));
  }
}

for (var tehtluokkakoodi in tehtavaluokkaMap) {
  var kuvaus = "";
  var kasittelyvaiheetAsiakirjatyypit = {};
  var tehtluokkaitem = tehtavaluokkaMap[tehtluokkakoodi];
  if (!tehtluokkaitem.loytyi) continue;

  var tehtluokka = tehtluokkaitem.elem;

  for (var h = 0; tehtluokkaitem.jarjestys && h < tehtluokkaitem.jarjestys.length; h++) {
    var kasittelyvaihe = tehtluokkaitem.jarjestys[h];
    kuvaus += "KÄSITTELYVAIHE " + kasittelyvaihe + "\n";
    var asiakirjatyypit = kasittelyvaiheetAsiakirjatyypit[kasittelyvaihe] = [];
    doktyypit = tehtluokkaitem.kasittelyvaiheet[kasittelyvaihe];
    for (var i = 0; doktyypit && i < doktyypit.length; i++) {
      var metadatavalues = doktyypit[i];
      kuvaus += "- " + muotoileTieto("Asiakirjatyypin tarkenne (=asiakirjallinen tieto)", metadatavalues, docmetadatamap);
      var lisaaTieto = function (tieto, ennen, jalkeen, erotin) {
        var teksti = muotoileTieto(tieto, metadatavalues, docmetadatamap);
        if (teksti) {
          kuvaus += (erotin !== undefined ? erotin : ";") + " " + (ennen ? ennen : "") + teksti + (jalkeen ? jalkeen : "");
          return true;
        }
        return false;
      }
      lisaaTieto("Julkisuusluokka", "", "", ":");
      lisaaTieto("Tietosisällön kuvailu", "\"", "\"", ",");
      var sailytys = lisaaTieto("Säilytysaika", "säilytys ");
      lisaaTieto("Säilytysajan laskentaperuste", "laskentaperuste ", "", "");
      lisaaTieto("Säilytystapa", "", "", ",");
      if (sailytys) {
        lisaaTieto("Säilytysajan peruste", "(", ")", "");
        lisaaTieto("Säilytyksen lisätietoja", "", "", ",");
      }
      var salassapito = lisaaTieto("Salassapitoaika", "salassapito ");
      if (salassapito) lisaaTieto("Salassapitoperuste", "(", ")", "");
      lisaaTieto("Henkilötietoluonne");
      lisaaTieto("Siirretäänkö säilytysajan jälkeen arkistoon", "siirto arkistoon ");
      lisaaTieto("Arkistointitapa", "", "", "");
      lisaaTieto("Arkistoinnin lisätietoja", "", "", ",");
      lisaaTieto("Hävitystapa", "hävitys ");
      lisaaTieto("Tietojärjestelmä", "tietojärjestelmät ");
      lisaaTieto("Tietovaranto");
      kuvaus += "\n";
      var metadataArvot = [];
      for (var metadataname in dokumentinMetadatat) {
        metadataArvot.push(muotoileTieto(metadataname, metadatavalues, docmetadatamap));
      }
      asiakirjatyypit.push(metadataArvot);
    }
    kuvaus += "\n";
  }

  if (tehtluokka.documentation != kuvaus) {
    tehtluokka.documentation = kuvaus;
    console.log("- Kuvaus päivittyi " + tehtluokka);
    tehtluokka.prop("_Päivitetty", aikaleima);
  }
  tehtluokka.prop("_KäsittelyvaiheetAsiakirjatyypitJSON", JSON.stringify(kasittelyvaiheetAsiakirjatyypit));
}

console.log();

for (var tehtluokkakoodi in tehtavaluokkaMap) {
  var tehtluokkaitem = tehtavaluokkaMap[tehtluokkakoodi];
  if (!tehtluokkaitem.loytyi) {
    var tehtluokka = tehtluokkaitem.elem;
    var tvcnt = $("#" + tehtluokka.id).inRels("serving-relationship").sourceEnds("product").filter(fthHaving({ "_Tietovaranto": "1" })).size();
    var proscnt = $("#" + tehtluokka.id).inRels("serving-relationship").sourceEnds("business-process").filter(fth).size();
    var tjcnt = $("#" + tehtluokka.id).inRels("serving-relationship").sourceEnds("application-component").filter(fth).size();
    var cntstr = "tietovarantoja " + tvcnt + ", prosesseja " + proscnt + ", tietojärjestelmiä " + tjcnt;

    if (window.confirm("Tehtäväluokkaa " + tehtluokka + " ei enää löydy (" + cntstr + "). Poistetaanko tehtäväluokka?")) {
      console.log(">> Poistetaan tehtäväluokka " + tehtluokka);
      $("#" + tehtluokka.id).rels().each(function (rel) {
        muuttunutMerkinta(rel.source, rel.target, aikaleima);  // kohde itse tulee merkattua useamman kerran ennen poistamista, mutta eipä haittaa...
      });
      tehtluokka.delete();
    } else {
      console.error("Ei poistettu tehtäväluokkaa, jota ei enää löydy: " + tehtluokka + "; " + cntstr);
    }
  }
}

console.log("> Tarkistetaan tietovarannot");
var tietovarantoMap = {};
$("product").filter(fthHaving({ "_Tietovaranto": "1" })).each(function (tvelem) {
  tietovarantoMap[tvelem.name] = tvelem;
});
for (var tehtluokkakoodi in tehtavaluokkaMap) {
  var tehtluokkaitem = tehtavaluokkaMap[tehtluokkakoodi];
  if (!tehtluokkaitem.loytyi) continue;

  var nykyvarannot = {};
  $("#" + tehtluokkaitem.elem.id).inRels("serving-relationship").sourceEnds("product").filter(fthHaving({ "_Tietovaranto": "1" })).each(function (tvelem) {
    nykyvarannot[tvelem.id] = tvelem;
  });

  for (var varantonimi in tehtluokkaitem.tietovarannot) {
    if (!(varantonimi in tietovarantoMap)) {
      console.error("Tehtäväluokan " + tehtluokkaitem.elem.name + " tietovarantoa " + varantonimi + " ei löydy, ohitetaan");
      continue;
    }
    var varanto = tietovarantoMap[varantonimi];
    if (!(varanto.id in nykyvarannot)) {
      model.createRelationship("serving-relationship", "", varanto, tehtluokkaitem.elem);
      muuttunutMerkinta(varanto, tehtluokkaitem.elem, aikaleima);
      console.log("- Lisättiin tehtäväluokalle " + tehtluokkaitem.elem.name + " yhteys tietovarantoon " + varanto.name);
    } else {
      delete nykyvarannot[varanto.id];  // löytyi jo, poistetaan, jotta nähdään, mitä ei enää ole
    }
  }
  for (var varantoid in nykyvarannot) {
    console.log("- Poistetaan tehtäväluokalta " + tehtluokkaitem.elem.name + " yhteys tietovarantoon " + nykyvarannot[varantoid].name);
    $("#" + tehtluokkaitem.elem.id).inRels("serving-relationship").each(function (rel) {
      if ($("#" + rel.id).sourceEnds().first().id == varantoid) {
        muuttunutMerkinta(rel.source, rel.target, aikaleima);
        rel.delete();
        console.log("  - poistettu");
      }
    });
  }

}

console.log("> Tarkistetaan prosessit");
var prosessiMap = {};
$("business-process").filter(fth).each(function (proselem) {
  if (proselem.prop("Tunniste")) {
    prosessiMap[proselem.prop("Tunniste")] = proselem;
  }
  // Jätetään mahdollisuus merkitä TOS:ssa vielä oleva vanha tunniste ja kohdentaa sillä - vain jos ei löydy nykyistä prosessia ko. tunnisteella. Näitä voi lisätä useampia.
  var tosvanhat = proselem.prop("_TOS vanha tunniste", true);
  if (tosvanhat) {
    for (var i = 0; i < tosvanhat.length; i++) {
      if (!prosessiMap[tosvanhat[i]]) prosessiMap[tosvanhat[i]] = proselem;
    }
  }
});
for (var tehtluokkakoodi in tehtavaluokkaMap) {
  var tehtluokkaitem = tehtavaluokkaMap[tehtluokkakoodi];
  if (!tehtluokkaitem.loytyi) continue;

  var nykyprosessit = {};
  $("#" + tehtluokkaitem.elem.id).inRels("serving-relationship").each(function (rel) {
    if (rel.source.type != "business-process") return;
    if (!fth(rel.source)) return;
    var proselem = rel.source;
    nykyprosessit[proselem.id] = { "prosessi": proselem, "relaatio": rel };
  });

  for (var prosessitieto in tehtluokkaitem.prosessit) {
    var tunniste = null;
    var match = prosessiTunnistePattern.exec(prosessitieto);
    if (match) tunniste = match[1];

    if (!tunniste || !(tunniste in prosessiMap)) {
      console.error("Tehtäväluokan " + tehtluokkaitem.elem.name + " prosessia " + prosessitieto + " ei löydy, ohitetaan");
      continue;
    }
    var prosessi = prosessiMap[tunniste];
    //tunniste = prosessi.prop("Tunniste"); // siltä varalta, että match oli TOS vanhaan tunnisteeseen
    if (prosessi.id in nykyprosessit) {
      var nykyprositem = nykyprosessit[prosessi.id];
      if (nykyprositem.relaatio.prop("Lähde")) {
        //console.log("- Poistetaan lähde-tieto \"" + nykyprosessit[prosessi.id].relaatio.prop("Lähde")  + "\" tehtäväluokan " + tehtluokkaitem.elem.name + " yhteydeltä prosessiin " + prosessi.name + ", joka saatiin nyt TOS:sta");
        nykyprositem.relaatio.removeProp("Lähde");
      }
      delete nykyprosessit[prosessi.id];  // löytyi jo, poistetaan, jotta nähdään, mitä ei enää ole
    } else {
      model.createRelationship("serving-relationship", "", prosessi, tehtluokkaitem.elem);
      muuttunutMerkinta(prosessi, tehtluokkaitem.elem, aikaleima);
      console.log("- Lisättiin tehtäväluokalle " + tehtluokkaitem.elem.name + " yhteys prosessiin " + prosessi.name);
    }
  }
  for (var prosid in nykyprosessit) {   // käydään läpi jäljelle jääneet nykyiset, joita ei tullut TOS:sta
    if (nykyprosessit[prosid].relaatio.prop("Lähde")) {
      // console.log("- Säilytetään tehtäväluokan " + tehtluokkaitem.elem.name + " yhteys prosessiin " + nykyprosessit[prosid].prosessi.name + ", jota ei saatu TOS:sta, mutta jonka lähde on \"" + nykyprosessit[prosid].relaatio.prop("Lähde") + "\"");
    } else {
      console.log("- Poistetaan tehtäväluokalta " + tehtluokkaitem.elem.name + " yhteys prosessiin " + nykyprosessit[prosid].prosessi.name);
      var rel = nykyprosessit[prosid].relaatio;
      muuttunutMerkinta(rel.source, rel.target, aikaleima);
      rel.delete();
      console.log("  - poistettu");
    }
  }
}


console.log("> Tarkistetaan tietojärjestelmät");
var tietojarjestelmaMap = {};
$("application-component").filter(fth).each(function (tjelem) {
  if (tjelem.prop("Järjestelmäsalkku ID")) {
    tietojarjestelmaMap[tjelem.prop("Järjestelmäsalkku ID")] = tjelem;
  }
  var thid = tjelem.prop("Tiedonhallintamalli ID");
  if (thid && !tietojarjestelmaMap[thid]) {
    tietojarjestelmaMap[thid] = tjelem;
  }
  // Jätetään mahdollisuus merkitä TOS:ssa vielä oleva vanha tunniste ja kohdentaa sillä - vain jos ei kyseistä tunnistetta löydy nykyisistä. Näitä voi lisätä useampia. 
  var tosvanhat = tjelem.prop("_TOS vanha tunniste", true);
  if (tosvanhat) {
    for (var i = 0; i < tosvanhat.length; i++) {
      if (!tietojarjestelmaMap[tosvanhat[i]]) tietojarjestelmaMap[tosvanhat[i]] = tjelem;
    }
  }
});
for (var tehtluokkakoodi in tehtavaluokkaMap) {
  var tehtluokkaitem = tehtavaluokkaMap[tehtluokkakoodi];
  if (!tehtluokkaitem.loytyi) continue;

  var nykyjarjestelmat = {};
  $("#" + tehtluokkaitem.elem.id).inRels("serving-relationship").each(function (rel) {
    if (rel.source.type != "application-component") return;
    if (!fth(rel.source)) return;
    var tjelem = rel.source;
    nykyjarjestelmat[tjelem.id] = { "jarjestelma": tjelem, "relaatio": rel };
  });

  for (var jarjestelmatieto in tehtluokkaitem.tietojarjestelmat) {
    var tunniste = null;
    var match = tietojarjestelmaTunnistePattern.exec(jarjestelmatieto);
    if (match) tunniste = match[1];

    if (!tunniste || !(tunniste in tietojarjestelmaMap)) {
      console.error("Tehtäväluokan " + tehtluokkaitem.elem.name + " tietojärjestelmää " + jarjestelmatieto + " (havaittu tunniste \"" + tunniste + "\") ei löydy, ohitetaan");
      continue;
    }
    var jarjestelma = tietojarjestelmaMap[tunniste];
    if (jarjestelma.id in nykyjarjestelmat) {
      var nykyjarjitem = nykyjarjestelmat[jarjestelma.id];
      if (nykyjarjitem.relaatio.prop("Lähde")) {
        //console.log("- Poistetaan lähde-tieto \"" + nykyjarjestelmat[jarjestelma.id].relaatio.prop("Lähde")  + "\" tehtäväluokan " + tehtluokkaitem.elem.name + " yhteydeltä tietojärjestelmään " + jarjestelma.name + ", joka saatiin nyt TOS:sta");
        nykyjarjitem.relaatio.removeProp("Lähde");
      }
      delete nykyjarjestelmat[jarjestelma.id];  // löytyi jo, poistetaan, jotta nähdään, mitä ei enää ole
    } else {
      model.createRelationship("serving-relationship", "", jarjestelma, tehtluokkaitem.elem);
      muuttunutMerkinta(jarjestelma, tehtluokkaitem.elem, aikaleima);
      console.log("- Lisättiin tehtäväluokalle " + tehtluokkaitem.elem.name + " yhteys tietojärjestelmään " + jarjestelma.name);
    }
  }
  for (var jarjid in nykyjarjestelmat) {  // käydään läpi jäljelle jääneet nykyiset, joita ei tullut TOS:sta
    if (nykyjarjestelmat[jarjid].relaatio.prop("Lähde")) {
      // console.log("- Säilytetään tehtäväluokan " + tehtluokkaitem.elem.name + " yhteys tietojärjestelmään " + nykyjarjestelmat[jarjid].jarjestelma.name + ", jota ei saatu TOS:sta, mutta jonka lähde on \"" + nykyjarjestelmat[jarjid].relaatio.prop("Lähde") + "\"");
    } else {
      console.log("- Poistetaan tehtäväluokalta " + tehtluokkaitem.elem.name + " yhteys tietojärjestelmään " + nykyjarjestelmat[jarjid].jarjestelma.name);
      var rel = nykyjarjestelmat[jarjid].relaatio;
      muuttunutMerkinta(rel.source, rel.target, aikaleima);
      rel.delete();
      console.log("  - poistettu");
    }
  }

}


model.prop("Päivitetty Tiedonohjaussuunnitelmasta", uusinmuutos.format("isoDateTime"));
var asiakirjanMetadataNimet = [];
for (var metadataname in dokumentinMetadatat) {
  asiakirjanMetadataNimet.push(metadataname);
}
model.prop("_AsiakirjatyypinMetadatat", JSON.stringify(asiakirjanMetadataNimet));
console.log("> Valmis");
console.log();

