/*
 * Skripti, jolla tietojärjestelmien tiedot päivitetään lukemalla Espoon järjestelmäsalkusta viedystä 
 * CSV-tiedostosta käyttäen Papa Parse kirjastoa.
 */

"use strict";
var salkunkentat = {
  "EntityId": null,  // käsitellään erikseen
  "Järjestelmänimi": null,  // käsitellään erikseen
  "Kuvaus": null,  // käsitellään erikseen
  "Omistajaorg": null,  // käsitellään erikseen

  "Alias": "Alias",
  "Järj. omistaja": "Järjestelmän omistaja",
  "Toimialan vastuuhenkilö": "Toimialan vastuuhenkilö",
  "Ylläpitovastuu": "Ylläpitovastuu",
  "Järjestelmän kriittisyys kirjain": "Kriittisyys",
  "Elinkaaren vaihe": "Elinkaaren vaihe",
  "Hankinta pvm": "Hankinta pvm",
  "Tuotantokäyttö pvm": "Tuotantokäyttö pvm",
  "Alasajovaihe alkaa": "Alasajovaihe alkaa pvm",
  "Arvioitu luopuminen": "Arvioitu luopuminen pvm",
  "Poistettu": "Poistettu pvm",

  "Julkinen nimi": "Julkinen nimi",
  "Hakutekijät": "Hakutekijät",
  "Tietojen saatavuus avoimella rajapinnalla": "Tietojen saatavuus avoimella rajapinnalla",
  "Tietoaineistot": "Tietoaineistot",
  "Asiarekisteri": "Asiarekisteri",

  "Sisältää henkilötietoja": null,  // käsitellään erikseen
  "Käsitelläänkö järjestelmässä erityisiä henkilötietoryhmiä?": null,  // käsitellään erikseen
  "Henkilötietojen luovutus": "Henkilötietojen luovutus"
};

var liittymienkentat = {
  "Järjestelmä": null,  // käsitellään erikseen
  "Järj/ muu liittymä": null,  // käsitellään erikseen
  "Siirrettävät\npäätiedot": null,  // käsitellään erikseen
  "Riippuvuuden\ntyyppi": null,  // käsitellään erikseen

  "ID": "Riippuvuus-ID",
  "Kriittisyys": "_Kriittisyys",
  "Integraatioväylät": "_Integraatioväylät",
  "Henkilötieto\nsiirto": "Henkilötietojen siirtoa",
  "Siirrontyyppi": "Tiedonsiirtotapa",
  "Siirtoteknologia\nprotokolla": "_Siirtoteknologia",
  "Tapahtumavolyymi": "Tapahtumavolyymi",
  "Lisätiedot\nsiirrettävistä tiedoista": "_Lisätiedot siirrettävistä tiedoista"
}

console.show();
console.clear();

console.log("> Import CSV");
load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");
load(__SCRIPTS_DIR__ + "~lib/papaparse.min.js");
console.log("> Loaded Papa Parse");

function luoVapaatekstiJarjestelma(jarjnimi) {
  var kansio = $("#"+salkussaFolder.id).children("folder.Vapaatekstit liittymissä").first();
  if (kansio == null) {
    kansio = salkussaFolder.createFolder("Vapaatekstit liittymissä");
  }
  var jarj = model.createElement("application-component", jarjnimi, kansio);
  jarj.documentation = "Järjestelmäsalkun järjestelmäriippuvuuksissa (liittymän kohde tai lähde) vapaatekstinä annettu tieto, jota ei löydy järjestelmänä Järjestelmäsalkussa.";
  jarj.prop("_Tiedonhallintamalli", "1");
  jarj.prop("_JärjestelmäsalkunVapaateksti", "1");
  jarj.prop("_NimiSalkussa", jarjnimi);
  jarj.prop("Omistaja", "Tietohallinnon vapaatekstit");
  jarj.prop("_Päivitetty", aikaleima);
  muuttunutMerkinta(jarj, null, aikaleima);
  jarjNimiMap[jarjnimi] = jarj;
  //muuttuneetJarj[jarj.id] = "1";
  return jarj;
}

var salkkuUrl = model.prop("_JärjestelmäsalkkuURL");

var orgMap = {};
$("business-actor").filter(fth).each(function(org) { 	// ensin organisaatiot omilla nimillään
  orgMap[org.name] = org;
});
$("business-actor").filter(fth).each(function(org) {	// sitten Järjestelmäsalkku-aliaksin 
  var aliakset = org.prop("_NimiJärjestelmäsalkussa", true);
  if (aliakset) {
    for (var i=0; i<aliakset.length; i++) {
      orgMap[aliakset[i]] = org;
    }
  }
});

var jarjMap = {};
$("application-component").filter(fth).each(function(jarj) {
  var salkkuid = jarj.prop("Järjestelmäsalkku ID");
  if (salkkuid > 0) jarjMap[salkkuid] = jarj;
});

var nykyRelList = {};
$("flow-relationship").filter(fth).each(function (rel) { 
  if (rel.source.type == "application-component" && rel.target.type == "application-component") {
    nykyRelList[rel.id] = rel; 
  }
});

//var muuttuneetJarj = {};

var applicationFolder = $("folder.Application").first();
var tiedonhallintamalliFolder = $("#"+applicationFolder.id).find("folder.Tiedonhallintamalli").first();
if (tiedonhallintamalliFolder == null) {
  tiedonhallintamalliFolder = applicationFolder.createFolder("Tiedonhallintamalli");
}
var tietojarjFolder = $("#"+tiedonhallintamalliFolder.id).children("folder.Tietojärjestelmät").first();
if (tietojarjFolder == null) {
  tietojarjFolder = tiedonhallintamalliFolder.createFolder("Tietojärjestelmät");
}
var salkussaFolder = $("#"+tietojarjFolder.id).children("folder.Järjestelmäsalkussa").first();
if (salkussaFolder == null) {
  salkussaFolder = tietojarjFolder.createFolder("Järjestelmäsalkussa");
}

var filePath = window.promptOpenFile({ title: "Avaa järjestelmälistaus CSV", filterExtensions: ["*.CSV"], fileName: "jarjestelmat.csv" });
if (filePath) {
    // jos ei painanut cancelia jo edelliseen, kysytään saman tien tiedostonimi liittymien csv:lle, ettei joudu odottelemaan...
    var liitFilePath = window.promptOpenFile({ title: "Avaa liittymälistaus CSV", filterExtensions: ["*.CSV"], fileName: "riippuvuudet.csv" });

    var csvFile =  new java.io.InputStreamReader(new java.io.FileInputStream(filePath), "UTF-8");
    console.log("> Encoding " + csvFile.getEncoding());

    var csvtext ="";
    var data = csvFile.read();
    console.log("> Please Wait...");
    while(data != -1) {
        if (data != 0xfeff) {  // skipataan mahdollinen UTF-8 byte order mark
          var merkki = String.fromCharCode(data);
          csvtext+=merkki;
        }
        data = csvFile.read();
    }
    csvFile.close();

    console.log("> File loaded");
    var parsedCsv = Papa.parse(csvtext, {header: true});
    console.log("> File parsed");

    var csvData = parsedCsv.data;
    var csvMeta = parsedCsv.meta;
    for (var kentta in salkunkentat) {
      if (csvMeta.fields.indexOf(kentta) < 0) {
        if (!window.confirm("CSV:stä ei löydy saraketta nimeltä \"" + kentta +"\". Järjestelmäsalkun tiedostomuoto on ehkä muuttunut ja import-skripti tulisi tarkistaa. Haluatko jatkaa?"))
          exit();
      }
    }

    var aikaleima = new Date().format("isoDateTime");

    /*console.log("Headers:");
    for (var j = 0; j < csvMeta.fields.length; j++) {
      console.log("- " + j + ": " + csvMeta.fields[j]);
    }
    console.log("Rows:");
    for (var i = 0; i < csvData.length - 1; i++) {
      console.log("+ " + i + ": " + csvData[i].EntityId + " - " + csvData[i]["Järjestelmänimi"] + " [" + csvData[i]["Omistajaorg"] + "] " + csvData[i]["Elinkaaren vaihe"] + ", hankinta " + csvData[i]["Hankinta pvm"] + ", tuotanto " + csvData[i]["Tuotantokäyttö pvm"] + ", arvioitu luopuminen " + csvData[i]["Arvioitu luopuminen"] + ", poistettu " + csvData[i]["Poistettu"]);
    }*/


    for (var i = 1; i < csvData.length - 1; i++) {  // skipataan tarkoituksella ensimmäinen datarivi, jossa jotain Thinking Portfolion kenttä-id tauhkaa
      var jarjRivi = csvData[i];
      var salkkuId = jarjRivi["EntityId"];
      var nykyJarj = jarjMap[salkkuId];
      //console.log("- tarkastellaan järjestelmää " + salkkuId + " / " + nykyJarj);
      var muutos = {};
      var k=0;
      if (nykyJarj) {
        delete jarjMap[salkkuId];   // poistetaan objektista, jotta sinne jää lopuksi ne mitä ei enää saatu salkusta
      } else {
        if ($("application-component." + jarjRivi["Järjestelmänimi"]).size() > 0) {
          var herja = "HUOM! Järjestelmä nimeltä " + jarjRivi["Järjestelmänimi"] + " löytyi jo Archista mutta tuli uutena salkusta. Luodaan duplikaatti, tämä pitää korjata käsin.";
          console.error(herja);
          window.alert(herja);
        }
        nykyJarj = model.createElement("application-component", jarjRivi["Järjestelmänimi"]);
        nykyJarj.prop("_Tiedonhallintamalli", "1");
        nykyJarj.prop("Järjestelmäsalkku ID", salkkuId);
        nykyJarj.prop("Järjestelmäsalkku-linkki", salkkuUrl.replace("[SALKKUID]", salkkuId));
        nykyJarj.prop("_Päivitetty", aikaleima);
        nykyJarj.prop("_NimiPäivitetty", aikaleima);
        muuttunutMerkinta(nykyJarj, null, aikaleima);
        //muuttuneetJarj[nykyJarj.id] = "1";
	console.log("+ Lisätty uusi järjestelmä " + nykyJarj.name);
      }
      var uusiNimi = jarjRivi["Järjestelmänimi"];
      if (jarjRivi["Elinkaaren vaihe"] == "Poistettu") uusiNimi += " (POISTETTU)";
        else if (jarjRivi["Elinkaaren vaihe"] == "Alasajo") uusiNimi += " (ALASAJO)";
      if (uusiNimi != nykyJarj.name) {
        nykyJarj.name = uusiNimi;
        muutos["Nimi"] = uusiNimi;
        muuttunutMerkinta(nykyJarj, null, aikaleima);  // näkymän nimen muutos
      }
      if (jarjRivi["Järjestelmänimi"] != nykyJarj.prop("_NimiSalkussa")) {
        if (nykyJarj.prop("_NimiSalkussa")) {  // vanha nimi talteen vain jos sellainen oli
          var vanhanimi = nykyJarj.prop("_VanhaNimi") ? nykyJarj.prop("_VanhaNimi") + "; " : "";
          nykyJarj.prop("_VanhaNimi", vanhanimi + nykyJarj.name);
        }
        nykyJarj.prop("_NimiSalkussa", jarjRivi["Järjestelmänimi"]);
        muutos["_NimiSalkussa"] = jarjRivi["Järjestelmänimi"];
        nykyJarj.prop("_NimiPäivitetty", aikaleima);
      }
      if (jarjRivi["Kuvaus"] != nykyJarj.documentation) {
        nykyJarj.documentation = jarjRivi["Kuvaus"];
        muutos["Kuvaus"] = jarjRivi["Kuvaus"];
      }
      for (var kentta in salkunkentat) {
        if (salkunkentat[kentta]) {   // käsitellään tässä vain ne, joille ei ole erityiskäsittelyä
          if (jarjRivi[kentta]) {
            if (jarjRivi[kentta] != nykyJarj.prop(salkunkentat[kentta])) {  // kentällä on sisältöä csv:ssä ja se on eri kuin olemassa oleva tieto
              nykyJarj.prop(salkunkentat[kentta], jarjRivi[kentta]);
              muutos[salkunkentat[kentta]] = jarjRivi[kentta];
            }
          } else {
            if (nykyJarj.prop(salkunkentat[kentta])) {  // kentällä ei ole sisältöä csv:ssä ja olemassa on jokin tieto
              console.log("POISTETAAN KENTTÄÄ " + salkunkentat[kentta] + " JÄRJESTELMÄLTÄ " + nykyJarj.name);
              nykyJarj.removeProp(salkunkentat[kentta]);
              muutos[salkunkentat[kentta]] = "(POISTETTU)";
            }
          }
        }
      }
      var henkilotiedot = jarjRivi["Sisältää henkilötietoja"] + " ("
        + jarjRivi["Käsitelläänkö järjestelmässä erityisiä henkilötietoryhmiä?"] + ")";
      if (henkilotiedot != nykyJarj.prop("Henkilötietojen käsittely")) {
        nykyJarj.prop("Henkilötietojen käsittely", henkilotiedot);
        muutos["Henkilötietojen käsittely"] = henkilotiedot;
      }

      var uusiOmistaja = orgMap[jarjRivi["Omistajaorg"]];
      if (uusiOmistaja) {
        var nykyOmistajaRel = $("#"+nykyJarj.id).inRels("association-relationship.vastaa").first();
        var nykyOmistaja = null;
        if (nykyOmistajaRel) nykyOmistaja = $("#"+nykyOmistajaRel.id).sourceEnds("business-actor").first();
        if (!nykyOmistaja || nykyOmistaja.id != uusiOmistaja.id) { // omistajatieto eroaa
          if (nykyOmistaja) nykyOmistajaRel.delete();
          model.createRelationship("association-relationship", "vastaa", uusiOmistaja, nykyJarj);
          nykyJarj.prop("Omistaja", uusiOmistaja.name);
          muutos["Omistaja"] = uusiOmistaja.name;
          console.log("VAIHDETAAN JÄRJESTELMÄN " + nykyJarj.name + " OMISTAJAKSI " + uusiOmistaja.name);
          muuttunutMerkinta(nykyJarj, null, aikaleima);  // näkymä oikeaan kansioon
        } 
      } else {
        var herja = "Järjestelmän " + nykyJarj.name + " salkun omistajatietoa vastaavaa organisaatiota ei löydy (" + jarjRivi["Omistajaorg"] + "). Omistajatieto jätetään asettamatta/muuttamatta. Korjaa puute ja aja import uudelleen.";
        console.error(herja);
        window.alert(herja);
      }

      var omistaja = $("#"+nykyJarj.id).inRels("association-relationship.vastaa").sourceEnds("business-actor").first();
      var kansionimi = "Muut";
      if (omistaja != null) {
        var toimiala = omistaja.prop("Toimiala");
        if (omistaja.prop("Sisäinen/ulkoinen") == "ulkoinen") kansionimi = "Ulkoiset";
          else if (toimiala != null && toimiala != "") kansionimi = toimiala;
      }
      var kansio = $("#"+salkussaFolder.id).children("folder."+kansionimi).first();
      if (kansio == null) {
        kansio = salkussaFolder.createFolder(kansionimi);
      }
      kansio.add(nykyJarj);

      var teksti = "";
      for (var muuttunut in muutos) {
        teksti += muuttunut + " ";
      }
      if (teksti != "") {
        nykyJarj.prop("_Päivitetty", aikaleima);
        console.log("- Järjestelmällä " + nykyJarj.name + " muuttunut " + teksti);
      } else {
        //console.log("- Järjestelmällä " + nykyJarj.name + " ei muuttuneita tietoja.");
      }

    }  // CSV-rivien looppi

    for (var poistunutId in jarjMap) {  // Jäljellä vain salkussa olleet joita ei enää näy!
      var poistunutJarj = jarjMap[poistunutId];
      console.log("JÄRJESTELMÄ " + poistunutJarj.name + " POISTUNUT JÄRJESTELMÄSALKUSTA, SIIRRETÄÄN POISTUNEISIIN");
      poistunutJarj.prop("Järjestelmäsalkku ID", String(-poistunutId)); // alussa laitettiin jarjMapiin vain ne joiden id > 0
      poistunutJarj.name = poistunutJarj.name + " (POISTUNUT JÄRJESTELMÄSALKUSTA)";
      poistunutJarj.prop("_Päivitetty", aikaleima);
      poistunutJarj.prop("_Poistuneeksi merkitty", aikaleima);
      var kansio = $("#"+salkussaFolder.id).children("folder.Poistuneet").first();
      if (kansio == null) {
        kansio = salkussaFolder.createFolder("Poistuneet");
      }
      kansio.add(poistunutJarj);
    }

    /*
     * Liittymien läpikäynti
     */

    if (liitFilePath) {
      console.log();
      console.log("> Tuodaan liittymät");

      var jarjNimiMap = {};
      var vapaatekstiMap = {};
      $("application-component").filter(fth).each(function(jarj) {
        if (jarj.prop("_NimiSalkussa")) jarjNimiMap[jarj.prop("_NimiSalkussa")] = jarj;  // käytetään liittymien vastapään matchaamiseen
        if (jarj.prop("_JärjestelmäsalkunVapaateksti")) vapaatekstiMap[jarj.prop("_NimiSalkussa")] = jarj; 
      });
      var csvFile =  new java.io.InputStreamReader(new java.io.FileInputStream(liitFilePath), "UTF-8");
      console.log("> Encoding " + csvFile.getEncoding());

      var csvtext ="";
      var data = csvFile.read();
      console.log("> Please Wait...");
      while(data != -1) {
          if (data != 0xfeff) {  // skipataan mahdollinen UTF-8 byte order mark
            var merkki = String.fromCharCode(data);
            csvtext+=merkki;
          }
          data = csvFile.read();
      }
      csvFile.close();

      console.log("> File loaded");
      var parsedLiit = Papa.parse(csvtext, {header: true});
      console.log("> File parsed");

      var liitData = parsedLiit.data;
      var liitMeta = parsedLiit.meta;
      for (var kentta in liittymienkentat) {
        if (liitMeta.fields.indexOf(kentta) < 0) {
          if (!window.confirm("Liittymien CSV:stä ei löydy saraketta nimeltä \"" + kentta +"\". Järjestelmäsalkun tiedostomuoto on ehkä muuttunut ja import-skripti tulisi tarkistaa. Haluatko jatkaa?"))
            exit();
        }
      }

      var kenttatiedot = {};
    
      for (var i = 0; i < liitData.length - 1; i++) {
        var liitRivi = liitData[i];
        if (!liitRivi["Järj/ muu liittymä"]) continue;  // jos excelissä vastapäätieto on tyhjä, ei tuoda ko. riviä

        var ltyyppi = liitRivi["Riippuvuuden\ntyyppi"];
        var luku = !ltyyppi || ltyyppi == "Vain luku" || ltyyppi == "Luku ja kirjoitus";
        var kirjoitus = !ltyyppi || ltyyppi == "Vain kirjoitus" || ltyyppi == "Luku ja kirjoitus";

        var nykyJarj = jarjNimiMap[liitRivi["Järjestelmä"]];
        if (!nykyJarj) {
          console.error("Liittymälle merkittyä järjestelmää (Järjestelmä) ei löydy: " + liitRivi["Järjestelmä"]);
          continue;
        }
        var toinenJarj = jarjNimiMap[liitRivi["Järj/ muu liittymä"]];
        if (!toinenJarj) {
          console.error("Liittymälle merkittyä järjestelmää (Järj/ muu liittymä) ei löydy: " + liitRivi["Järj/ muu liittymä"]);
          continue;
        }
        var paatiedot = liitRivi["Siirrettävät\npäätiedot"].replace(/\n/g, ", ");
        var rels = [];

        if (vapaatekstiMap[liitRivi["Järj/ muu liittymä"]]) delete vapaatekstiMap[liitRivi["Järj/ muu liittymä"]];

        if (luku) {
          var nykyRel = null;
          if (toinenJarj) nykyRel = $("#"+nykyJarj.id).inRels("flow-relationship").filter(fth).filter(function (rel) {
            if (rel.source.id != toinenJarj.id) return false;
            return (!rel.name && !paatiedot) || (rel.name == paatiedot);
          }).first();
          if (nykyRel) {
            //console.log("- (Löydettiin relaatio järjestelmästä " + nykyRel.source.name + " järjestelmään " + nykyRel.target.name + ", tiedot " + nykyRel.name + ")");
            delete nykyRelList[nykyRel.id];  // löytyi, ei jatkotoimenpiteitä
          } else {
            if (!toinenJarj) toinenJarj = luoVapaatekstiJarjestelma(liitRivi["Järj/ muu liittymä"]);
            nykyRel = model.createRelationship("flow-relationship", paatiedot, toinenJarj, nykyJarj);
            muuttunutMerkinta(toinenJarj, nykyJarj, aikaleima);
            console.log("+ Lisätään luku-liittymä järjestelmästä " + nykyRel.source.name + " järjestelmään " + nykyRel.target.name + ", tiedot " + nykyRel.name);
            nykyRel.prop("_Tiedonhallintamalli", "1");
            nykyRel.prop("_Päivitetty", aikaleima);
            //muuttuneetJarj[nykyJarj.id] = "1";
            //muuttuneetJarj[toinenJarj.id] = "1";
          }
          if (nykyRel) {
            rels.push(nykyRel);
            if (ltyyppi) nykyRel.removeProp("Epävarmuus"); else nykyRel.prop("Epävarmuus", " ?");
          }
        }
        if (kirjoitus) {
          nykyRel = null;
          if (toinenJarj) nykyRel = $("#"+nykyJarj.id).outRels("flow-relationship").filter(fth).filter(function (rel) {
            if (rel.target.id != toinenJarj.id) return false;
            return (!rel.name && !paatiedot) || (rel.name == paatiedot);
          }).first();
          if (nykyRel) {
            //console.log("- (Löydettiin relaatio järjestelmästä " + nykyRel.source.name + " järjestelmään " + nykyRel.target.name + ", tiedot " + nykyRel.name + ")");
            delete nykyRelList[nykyRel.id];  // löytyi, ei jatkotoimenpiteitä
          } else {
            if (!toinenJarj) toinenJarj = luoVapaatekstiJarjestelma(liitRivi["Järj/ muu liittymä"]);
            nykyRel = model.createRelationship("flow-relationship", paatiedot, nykyJarj, toinenJarj);
            muuttunutMerkinta(nykyJarj, toinenJarj, aikaleima);
            console.log("+ Lisätään kirjoitus-liittymä järjestelmästä " + nykyRel.source.name + " järjestelmään " + nykyRel.target.name + ", tiedot " + nykyRel.name);
            nykyRel.prop("_Tiedonhallintamalli", "1");
            nykyRel.prop("_Päivitetty", aikaleima);
            //muuttuneetJarj[nykyJarj.id] = "1";
            //muuttuneetJarj[toinenJarj.id] = "1";
          }
          if (nykyRel) {
            rels.push(nykyRel);
            if (ltyyppi) nykyRel.removeProp("Epävarmuus"); else nykyRel.prop("Epävarmuus", " ?");
          }
        }

        for (var j = 0; j < rels.length; j++) {
          var rel = rels[j];
          var kentat = kenttatiedot[rel.id];
          if (!kentat) {
            kentat = {};
            kenttatiedot[rel.id] = kentat;
            kentat["rivinro"] = [];  // käytetään lähinnä rivien lukumäärän seurantaan
            kentat["kokorivi"] = [];  // vähän tässä joutuu sähläämään duplikaattien väistämiseksi...
          }
          var k = kentat["rivinro"].length;
          kentat["rivinro"][k] = i;
          var kokorivi = "";
          for (var lkentta in liittymienkentat) {
            var kenttanimi = liittymienkentat[lkentta];
            if (kenttanimi && liitRivi[lkentta]) {   // käsitellään tässä vain ne, joille ei ole erityiskäsittelyä
              if (!kentat[kenttanimi]) kentat[kenttanimi] = [];
              kentat[kenttanimi][k] = liitRivi[lkentta];
              kokorivi += liitRivi[lkentta] + "$";
            }
          }
          kentat["kokorivi"][k] = kokorivi;
        } // rels for

      } // liittymärivi -for

      for (var relid in kenttatiedot) {
        var rel = $("#" + relid).first();
        var muutos = {};
        kentat = kenttatiedot[relid];
        var indeksit = [];  // vähän tässä joutuu sähläämään duplikaattien väistämiseksi...
        var kokorivit = {};
        var rivinrot = "";
        for (var k =  0; k < kentat["rivinro"].length; k++) {
          rivinrot += kentat["rivinro"][k] + " ";
          if (kokorivit[kentat["kokorivi"][k]]) continue;
          kokorivit[kentat["kokorivi"][k]] = "1";
          indeksit.push(k);
        }
        var monta = (indeksit.length > 1);
        if (monta) console.log("- Relaatio " + rel.name + " (" + rel.source.name + " - " + rel.target.name + ") monella rivillä: " + rivinrot);
        for (var kentta in kentat) {
          if (kentta == "rivinro" || kentta == "kokorivi") continue;
          var teksti = "";
          for (var k = 0; k < indeksit.length; k++) {
            teksti += (monta ? "[" : "") + kentat[kentta][indeksit[k]] + (monta ? "] " : "");
          }
          if (teksti) {
            if (teksti != rel.prop(kentta)) {
              rel.prop(kentta, teksti);
              muutos[kentta] = teksti;
            }
          } else {
            if (rel.prop(kentta)) {
              console.log("- POISTETAAN KENTTÄÄ " + kentta + " LIITTYMÄLTÄ " + rel.name);
              rel.removeProp(kentta);
              muutos[kentta] = "(POISTETTU)";
            }
          }
        }
        var dokuteksti = "";
        for (var k = 0; k < indeksit.length; k++) {
          dokuteksti += (monta ? "[" : "") + null2e(kentat["Tiedonsiirtotapa"] ? kentat["Tiedonsiirtotapa"][indeksit[k]] : "") + " " 
            /* + null2e(kentat["Integraatioväylät"] ? kentat["Integraatioväylät"][indeksit[k]] : "") + " "  // Ei viedä enää integraatioväylä-tietoa tänne */
            + null2e(kentat["Tapahtumavolyymi"] ? kentat["Tapahtumavolyymi"][indeksit[k]] : "") + (monta ? "] " : "");
        }
        rel.documentation = dokuteksti;
        var teksti = "";
        for (var muuttunut in muutos) {
          teksti += muuttunut + " ";
        }
        if (teksti) {
          rel.prop("_Päivitetty", aikaleima);
          console.log("  - Liittymällä " + rel.name + " (" + rel.source.name + " - " + rel.target.name + ") muuttunut " + teksti);
        } else {
          //console.log("  - Liittymällä " + rel.name + " ei muuttuneita tietoja.");
        }
      }

      //var poistaminen = 0;
      for (var relId in nykyRelList) {  // relaatiot, joita ei enää näy salkussa 
        if ($("#" + relId).first().prop("_ArchissaLisätty")) continue;  // ohitetaan jos ko. property asetettu
        var vanhaRel = nykyRelList[relId];
        muuttunutMerkinta(vanhaRel.source, vanhaRel.target, aikaleima);
        console.log("  - POISTETTIIN relaatio jota ei enää näy salkussa järjestelmästä " + vanhaRel.source.name + " järjestelmään " + vanhaRel.target.name + ", tiedot " + vanhaRel.name);
        vanhaRel.delete();
      }

    } else console.log("> Liittymä-CSV jätettiin valitsematta, ohitetaan");  // if filePath liittymä-csv:lle
    
    for (var jarjNimi in vapaatekstiMap) {
      var vtjarj = vapaatekstiMap[jarjNimi]
      var teksti = "Tietohallinnon vapaatekstijärjesterjestelmää " + vtjarj + " ei enää tullut";
      console.log(teksti);
      if (window.confirm(teksti + " - poistetaanko (kannattanee poistaa)?")) {
        console.log("POISTETAAN järjestelmä " + jarjNimi);
        vtjarj.delete();
      }
    }

    model.prop("Päivitetty Järjestelmäsalkusta", aikaleima);
    console.log("> Parsing Complete")

    console.log("> Valmis");
}
else {
    console.log("> Cancelled");
}
