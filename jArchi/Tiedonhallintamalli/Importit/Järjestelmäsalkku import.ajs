/*
 * Skripti, jolla tietojärjestelmien tiedot päivitetään lukemalla Espoon järjestelmäsalkusta viedystä 
 * CSV-tiedostosta käyttäen Papa Parse kirjastoa.
 */

salkunkentat = {
  "EntityId": null,  // käsitellään erikseen
  "Järjestelmänimi": null,  // käsitellään erikseen
  "Tietosisältö": null,  // käsitellään erikseen
  "Omistajaorg": null,  // käsitellään erikseen

  "Alias": "Alias",
  "Hakutekijät": "Hakutekijät",
  "Järj. omistaja": "Vastaava viranhaltija",
  "Ylläpitovastuu": "Ylläpitovastuu",
  "Järjestelmän kriittisyys kirjain": "Kriittisyys",
  "Elinkaaren vaihe": "Elinkaaren vaihe",
  "Hankinta pvm": "Hankinta pvm",
  "Tuotantokäyttö pvm": "Tuotantokäyttö pvm",
  "Alasajovaihe alkaa": "Alasajovaihe alkaa pvm",
  "Arvioitu luopuminen": "Arvioitu luopuminen pvm",
  "Poistettu": "Poistettu pvm",

  "Liittyvä järjestelmä": null,  // liittymätiedot käsitellään erikseen
  "Siirrettävät päätiedot": null,  // liittymätiedot käsitellään erikseen
  "Kriittisyys": null,  // liittymätiedot käsitellään erikseen
  "Riippuvuuden tyyppi": null  // liittymätiedot käsitellään erikseen
};

console.show();
console.clear();

console.log("> Import CSV");
load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");
load(__SCRIPTS_DIR__ + "~lib/papaparse.min.js");
console.log("> Loaded Papa Parse");

function luoVapaatekstiJarjestelma(_jarjnimi) {
  _kansio = $("#"+salkussaFolder.id).children("folder.Vapaatekstit liittymissä").first();
  if (_kansio == null) {
    _kansio = salkussaFolder.createFolder("Vapaatekstit liittymissä");
  }
  _jarj = model.createElement("application-component", _jarjnimi, _kansio);
  _jarj.documentation = "Järjestelmäsalkun järjestelmäriippuvuuksissa (liittymän kohde tai lähde) vapaatekstinä annettu tieto, jota ei löydy järjestelmänä Järjestelmäsalkussa.";
  _jarj.prop("_Tiedonhallintamalli", "1");
  _jarj.prop("_JärjestelmäsalkunVapaateksti", "1");
  _jarj.prop("_NimiSalkussa", _jarjnimi);
  _jarj.prop("_Omistaja", "Tietohallinnon vapaatekstit");
  _jarj.prop("_Päivitetty", aikaleima);
  jarjNimiMap[_jarjnimi] = _jarj;
  return _jarj;
}

orgMap = {};
$("business-actor").filter(fth).each(function(org) { 	// ensin organisaatiot omilla nimillään
  orgMap[org.name] = org;
});
$("business-actor").filter(fth).each(function(org) {	// sitten Järjestelmäsalkku-aliaksin 
  aliakset = org.prop("_NimiJärjestelmäsalkussa", true);
  if (aliakset) {
    for (var i=0; i<aliakset.length; i++) {
      orgMap[aliakset[i]] = org;
    }
  }
});

jarjMap = {};
$("application-component").filter(fth).each(function(jarj) {
  salkkuid = jarj.prop("Järjestelmäsalkku ID");
  if (salkkuid > 0) jarjMap[salkkuid] = jarj;
});

nykyRelList = {};
$("flow-relationship").filter(fth).each(function (rel) { 
  if (rel.source.type == "application-component" && rel.target.type == "application-component") {
    nykyRelList[rel.id] = rel; 
  }
});

applicationFolder = $("folder.Application").first();
tiedonhallintamalliFolder = $("#"+applicationFolder.id).find("folder.Tiedonhallintamalli").first();
if (tiedonhallintamalliFolder == null) {
  tiedonhallintamalliFolder = applicationFolder.createFolder("Tiedonhallintamalli");
}
tietojarjFolder = $("#"+tiedonhallintamalliFolder.id).children("folder.Tietojärjestelmät").first();
if (tietojarjFolder == null) {
  tietojarjFolder = tiedonhallintamalliFolder.createFolder("Tietojärjestelmät");
}
salkussaFolder = $("#"+tietojarjFolder.id).children("folder.Järjestelmäsalkussa").first();
if (salkussaFolder == null) {
  salkussaFolder = tietojarjFolder.createFolder("Järjestelmäsalkussa");
}

var filePath = window.promptOpenFile({ title: "Avaa CSV", filterExtensions: ["*.CSV"], fileName: "default.csv" });
if (filePath) {
    csvFile =  new java.io.InputStreamReader(new java.io.FileInputStream(filePath), "UTF-8");
    console.log("> Encoding " + csvFile.getEncoding());

    var csvtext ="";
    var data = csvFile.read();
    console.log("> Please Wait...");
    while(data != -1) {
        if (data != 0xfeff) {  // skipataan mahdollinen UTF-8 byte order mark
          var merkki = String.fromCharCode(data);
          csvtext+=merkki;
        }
        data = csvFile.read();
    }
    csvFile.close();

    console.log("> File loaded");
    parsedCsv = Papa.parse(csvtext, {header: true});
    console.log("> File parsed");

    csvData = parsedCsv.data;
    csvMeta = parsedCsv.meta;
    for (kentta in salkunkentat) {
      if (csvMeta.fields.indexOf(kentta) < 0) {
        if (!window.confirm("CSV:stä ei löydy saraketta nimeltä \"" + kentta +"\". Järjestelmäsalkun tiedostomuoto on ehkä muuttunut ja import-skripti tulisi tarkistaa. Haluatko jatkaa?"))
          exit();
      }
    }

    liittymakenttia = 0;
    suffiksi = "";
    while (csvMeta.fields.indexOf("Liittyvä järjestelmä" + suffiksi) >= 0) suffiksi = " (" + ++liittymakenttia + ")";
    liittymaKoonti = {};

    aikaleima = new Date().format("isoDateTime");

    /*console.log("Headers:");
    for (var j = 0; j < csvMeta.fields.length; j++) {
      console.log("- " + j + ": " + csvMeta.fields[j]);
    }
    console.log("Rows:");
    for (var i = 0; i < csvData.length - 1; i++) {
      console.log("+ " + i + ": " + csvData[i].EntityId + " - " + csvData[i]["Järjestelmänimi"] + " [" + csvData[i]["Omistajaorg"] + "] " + csvData[i]["Elinkaaren vaihe"] + ", hankinta " + csvData[i]["Hankinta pvm"] + ", tuotanto " + csvData[i]["Tuotantokäyttö pvm"] + ", arvioitu luopuminen " + csvData[i]["Arvioitu luopuminen"] + ", poistettu " + csvData[i]["Poistettu"]);
    }*/


    for (var i = 1; i < csvData.length - 1; i++) {  // skipataan tarkoituksella ensimmäinen datarivi, jossa jotain Thinking Portfolion kenttä-id tauhkaa
      jarjRivi = csvData[i];
      salkkuId = jarjRivi["EntityId"];
      nykyJarj = jarjMap[salkkuId];
      //console.log("- tarkastellaan järjestelmää " + salkkuId + " / " + nykyJarj);
      muutos = {};
      var k=0;
      if (nykyJarj) {
        delete jarjMap[salkkuId];   // poistetaan objektista, jotta sinne jää lopuksi ne mitä ei enää saatu salkusta
      } else {
        if ($("application-component." + jarjRivi["Järjestelmänimi"]).size() > 0) {
          herja = "HUOM! Järjestelmä nimeltä " + jarjRivi["Järjestelmänimi"] + " löytyi jo Archista mutta tuli uutena salkusta. Luodaan duplikaatti, tämä pitää korjata käsin.";
          console.error(herja);
          window.alert(herja);
        }
        nykyJarj = model.createElement("application-component", jarjRivi["Järjestelmänimi"]);
        nykyJarj.prop("_Tiedonhallintamalli", "1");
        nykyJarj.prop("Järjestelmäsalkku ID", salkkuId);
        nykyJarj.prop("Järjestelmäsalkku-linkki", "https://thinkingportfolio.com/?eid=" + salkkuId + "&cid=7");
        nykyJarj.prop("_Päivitetty", aikaleima);
	console.log("+ Lisätty uusi järjestelmä " + nykyJarj.name);
      }
      uusiNimi = jarjRivi["Järjestelmänimi"];
      if (jarjRivi["Elinkaaren vaihe"] == "Poistettu") uusiNimi += " (POISTETTU)";
        else if (jarjRivi["Elinkaaren vaihe"] == "Alasajo") uusiNimi += " (ALASAJO)";
      if (uusiNimi != nykyJarj.name) {
        nykyJarj.name = uusiNimi;
        muutos["Nimi"] = uusiNimi;
      }
      if (jarjRivi["Järjestelmänimi"] != nykyJarj.prop("_NimiSalkussa")) {
        nykyJarj.prop("_NimiSalkussa", jarjRivi["Järjestelmänimi"]);
        muutos["_NimiSalkussa"] = jarjRivi["Järjestelmänimi"];
      }
      if (jarjRivi["Tietosisältö"] != nykyJarj.documentation) {
        nykyJarj.documentation = jarjRivi["Tietosisältö"];
        muutos["Kuvaus"] = jarjRivi["Tietosisältö"];
      }
      for (kentta in salkunkentat) {
        if (salkunkentat[kentta]) {   // käsitellään tässä vain ne, joille ei ole erityiskäsittelyä
          if (jarjRivi[kentta]) {
            if (jarjRivi[kentta] != nykyJarj.prop(salkunkentat[kentta])) {  // kentällä on sisältöä csv:ssä ja se on eri kuin olemassa oleva tieto
              nykyJarj.prop(salkunkentat[kentta], jarjRivi[kentta]);
              muutos[salkunkentat[kentta]] = jarjRivi[kentta];
            }
          } else {
            if (nykyJarj.prop(salkunkentat[kentta])) {  // kentällä ei ole sisältöä csv:ssä ja olemassa on jokin tieto
              console.log("POISTETAAN KENTTÄÄ " + salkunkentat[kentta] + " JÄRJESTELMÄLTÄ " + nykyJarj.name);
              nykyJarj.removeProp(salkunkentat[kentta]);
              muutos[salkunkentat[kentta]] = "(POISTETTU)";
            }
          }
        }
      }

      uusiOmistaja = orgMap[jarjRivi["Omistajaorg"]];
      if (uusiOmistaja) {
        nykyOmistajaRel = $("#"+nykyJarj.id).inRels("association-relationship.vastaa").first();
        nykyOmistaja = null;
        if (nykyOmistajaRel) nykyOmistaja = $("#"+nykyOmistajaRel.id).sourceEnds("business-actor").first();
        if (!nykyOmistaja || nykyOmistaja.id != uusiOmistaja.id) { // omistajatieto eroaa
          if (nykyOmistaja) nykyOmistajaRel.delete();
          model.createRelationship("association-relationship", "vastaa", uusiOmistaja, nykyJarj);
          nykyJarj.prop("_Omistaja", uusiOmistaja.name);
          muutos["Omistaja"] = uusiOmistaja.name;
          console.log("VAIHDETAAN JÄRJESTELMÄN " + nykyJarj.name + " OMISTAJAKSI " + uusiOmistaja.name);
        } 
      } else {
        herja = "Järjestelmän " + nykyJarj.name + " salkun omistajatietoa vastaavaa organisaatiota ei löydy (" + jarjRivi["Omistajaorg"] + "). Omistajatieto jätetään asettamatta/muuttamatta. Korjaa puute ja aja import uudelleen.";
        console.error(herja);
        window.alert(herja);
      }

      omistaja = $("#"+nykyJarj.id).inRels("association-relationship.vastaa").sourceEnds("business-actor").first();
      kansionimi = "Muut";
      if (omistaja != null) {
        toimiala = omistaja.prop("Toimiala");
        if (omistaja.prop("Sisäinen/ulkoinen") == "ulkoinen") kansionimi = "Ulkoiset";
          else if (toimiala != null && toimiala != "") kansionimi = toimiala;
      }
      kansio = $("#"+salkussaFolder.id).children("folder."+kansionimi).first();
      if (kansio == null) {
        kansio = salkussaFolder.createFolder(kansionimi);
      }
      kansio.add(nykyJarj);

      liittymat = [];      
      for (j = 0; j < liittymakenttia; j++) {
        suffiksi = j ? " (" + j + ")" : "";
        if (jarjRivi["Liittyvä järjestelmä" + suffiksi]) {
          liittymat.push({ 
            "jarjestelma": jarjRivi["Liittyvä järjestelmä" + suffiksi],
            "paatiedot": jarjRivi["Siirrettävät päätiedot" + suffiksi],
            "kriittisyys": jarjRivi["Kriittisyys" + suffiksi],
            "tyyppi": jarjRivi["Riippuvuuden tyyppi" + suffiksi]
          });
        }
      }
      if (liittymat.length > 0) liittymaKoonti[nykyJarj.id] = liittymat;

      teksti = "";
      for (muuttunut in muutos) {
        teksti += muuttunut + " ";
      }
      if (teksti != "") {
        nykyJarj.prop("_Päivitetty", aikaleima);
        console.log("- Järjestelmällä " + nykyJarj.name + " muuttunut " + teksti);
      } else {
        //console.log("- Järjestelmällä " + nykyJarj.name + " ei muuttuneita tietoja.");
      }

    }  // CSV-rivien looppi

    for (poistunutId in jarjMap) {  // Jäljellä vain salkussa olleet joita ei enää näy!
      poistunutJarj = jarjMap[poistunutId];
      console.log("JÄRJESTELMÄ " + poistunutJarj.name + " POISTUNUT JÄRJESTELMÄSALKUSTA, SIIRRETÄÄN POISTUNEISIIN");
      poistunutJarj.prop("Järjestelmäsalkku ID", -poistunutId); // alussa laitettiin jarjMapiin vain ne joiden id > 0
      poistunutJarj.name = poistunutJarj.name + " (POISTUNUT JÄRJESTELMÄSALKUSTA)";
      poistunutJarj.prop("_Päivitetty", aikaleima);
      kansio = $("#"+salkussaFolder.id).children("folder.Poistuneet").first();
      if (kansio == null) {
        kansio = salkussaFolder.createFolder("Poistuneet");
      }
      kansio.add(poistunutJarj);
    }

    /*
     * Liittymien läpikäynti
     */

    console.log();
    console.log("> Käydään läpi liittymät");

    jarjNimiMap = {};
    $("application-component").filter(fth).each(function(jarj) {
      if (jarj.prop("_NimiSalkussa")) jarjNimiMap[jarj.prop("_NimiSalkussa")] = jarj;  // käytetään liittymien vastapään matchaamiseen
    });

    for (jarjId in liittymaKoonti) {
      //console.log("jarjId " + jarjId + " size " + $("#"+jarjId).size());
      nykyJarj = $("#"+jarjId).first();
      console.log("Järjestelmän " + nykyJarj.name + " liittymät:");
      liittymat = liittymaKoonti[jarjId];
      for (j = 0; j < liittymat.length; j++) {
        l = liittymat[j];
        luku = !l.tyyppi || l.tyyppi == "Vain luku" || l.tyyppi == "Luku ja kirjoitus";
        kirjoitus = !l.tyyppi || l.tyyppi == "Vain kirjoitus" || l.tyyppi == "Luku ja kirjoitus";
        if (luku) {
          lahdeJarj = jarjNimiMap[l.jarjestelma];
          nykyRel = null;
          if (lahdeJarj) nykyRel = $("#"+nykyJarj.id).inRels("flow-relationship").filter(fth).filter(function (rel) {
            if (rel.source.id != lahdeJarj.id) return false;
            return (!rel.name && !l.paatiedot) || (rel.name == l.paatiedot);
          }).first();
          if (nykyRel) {
            console.log("    - (Löydettiin relaatio järjestelmästä " + nykyRel.source.name + " järjestelmään " + nykyRel.target.name + ", tiedot " + nykyRel.name + ")");
            delete nykyRelList[nykyRel.id];  // löytyi, ei jatkotoimenpiteitä
            nykyRel.prop("Kriittisyys", l.kriittisyys);  // päivitetään kriittisyystieto, ei lokiteta tai merkitä päivitystä sen kummemmin
          } else {
            if (!lahdeJarj) lahdeJarj = luoVapaatekstiJarjestelma(l.jarjestelma);
            nykyRel = model.createRelationship("flow-relationship", l.paatiedot, lahdeJarj, nykyJarj);
            nykyRel.prop("_Tiedonhallintamalli", "1");
            nykyRel.prop("Kriittisyys", l.kriittisyys);
            nykyRel.prop("_Päivitetty", aikaleima);
            console.log("  + Lisätään liittymä järjestelmästä " + nykyRel.source.name + " järjestelmään " + nykyRel.target.name + ", tiedot " + nykyRel.name);
          }
          if (nykyRel) {
            if (l.tyyppi) nykyRel.removeProp("Epävarmuus"); else nykyRel.prop("Epävarmuus", " ?");
          }
        }
        if (kirjoitus) {
          kohdeJarj = jarjNimiMap[l.jarjestelma];
          nykyRel = null;
          if (kohdeJarj) nykyRel = $("#"+nykyJarj.id).outRels("flow-relationship").filter(fth).filter(function (rel) {
            if (rel.target.id != kohdeJarj.id) return false;
            return (!rel.name && !l.paatiedot) || (rel.name == l.paatiedot);
          }).first();
          if (nykyRel) {
            console.log("    - (Löydettiin relaatio järjestelmästä " + nykyRel.source.name + " järjestelmään " + nykyRel.target.name + ", tiedot " + nykyRel.name + ")");
            delete nykyRelList[nykyRel.id];  // löytyi, ei jatkotoimenpiteitä
            nykyRel.prop("Kriittisyys", l.kriittisyys);  // päivitetään kriittisyystieto, ei lokiteta tai merkitä päivitystä sen kummemmin
          } else {
            if (!kohdeJarj) kohdeJarj = luoVapaatekstiJarjestelma(l.jarjestelma);
            nykyRel = model.createRelationship("flow-relationship", l.paatiedot, nykyJarj, kohdeJarj);
            nykyRel.prop("_Tiedonhallintamalli", "1");
            nykyRel.prop("Kriittisyys", l.kriittisyys);
            nykyRel.prop("_Päivitetty", aikaleima);
            console.log("  + Lisätään liittymä järjestelmästä " + nykyRel.source.name + " järjestelmään " + nykyRel.target.name + ", tiedot " + nykyRel.name);
          }
          if (nykyRel) {
            if (l.tyyppi) nykyRel.removeProp("Epävarmuus"); else nykyRel.prop("Epävarmuus", " ?");
          }
        }
      }
    }  // liittymaKoonti-for

    for (relId in nykyRelList) {  // relaatiot, joita ei enää näy salkussa -> jätetään mutta merkitään tiedonhallintamallin ulkopuolisiksi
      vanhaRel = nykyRelList[relId];
      if (!window.confirm("Oltaisiin poistamassa relaatiota järjestelmästä " + vanhaRel.source.name + " järjestelmään " + vanhaRel.target.name + ", tiedot " + vanhaRel.name)) continue;
      vanhaRel.removeProp("_Tiedonhallintamalli");
      vanhaRel.prop("_PoistunutSalkusta", "1");
      vanhaRel.prop("_Päivitetty", aikaleima);
      console.log("  - MERKITÄÄN POISTUNEEKSI relaatio jota ei enää näy salkussa järjestelmästä " + vanhaRel.source.name + " järjestelmään " + vanhaRel.target.name + ", tiedot " + vanhaRel.name);
    }

    salkussaFolder.prop("Päivitetty Järjestelmäsalkusta", aikaleima);
    console.log("> Parsing Complete")
}
else {
    console.log("> Cancelled");
}