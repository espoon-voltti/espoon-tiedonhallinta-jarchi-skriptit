/*
 * Skripti, jolla prosessien tiedot päivitetään lukemalla Espoon IMS:stä viedystä 
 * CSV-tiedostosta käyttäen Papa Parse kirjastoa.
 *
 * DONE: ehkä prosessien matchays nykyprosesseihin ensin omassa loopissaan
 * DONE: yläprosessi-alaprosessi relaatioiden laitto
 * DONE: saa/tuottaa syötteitä relaatioiden laitto
 * DONE: huomautuslista CSV
 * 
 */

"use strict";

var tunnistePattern = /^(([OT]|Y[AJP]?)?\d+\.(\d+|\d+(\.\d+)*)?)($|[^0-9\.])/;
var syotePattern = /(([OT]|Y[AJP]?)?\d+\.(\d+|\d+(\.\d+)*)?)($|[^0-9\.])/g;

var imskentat = {
  "Nimi": null,  // käsitellään erikseen
  "Id": null,  // käsitellään erikseen
  "Yläprosessin id": null,  // käsitellään erikseen
  "Linkki": null,  // käsitellään erikseen
  "Tunniste tiedonhallintamallissa *": null,  // käsitellään erikseen
  "Prosessin kuvaus *": null,  // käsitellään erikseen
  "Omistava tulosyksikkö **": null,  // käsitellään erikseen

  "Lopputuotos (palvelu/asiakirja) *": "Prosessissa syntyvä lopputuotos",
  "Prosessi saa syötteitä *": "Saa syötteitä",
  "Prosessi tuottaa syötteitä *": "Tuottaa syötteitä",
  "Prosessin omistuksen lisätieto *": "Omistuksen lisätieto"  // käsitellään erikseen
};

function siisti(arvo) {
  var patt = /\r?\n/g;
  return arvo.trim().replace(patt, ", ");
}

console.show();
console.clear();

console.log("> Import CSV");
load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");
load(__SCRIPTS_DIR__ + "~lib/papaparse.min.js");
console.log("> Loaded Papa Parse");

var imsUrl = model.prop("_IMSURL");

var orgMap = {};
$("business-actor").filter(fth).each(function(org) { 	// ensin organisaatiot omilla nimillään
  orgMap[org.name] = org;
});
$("business-actor").filter(fth).each(function(org) {	// sitten IMS-aliaksin 
  var aliakset = org.prop("_NimiIMSssä", true);
  if (aliakset) {
    for (var i=0; i<aliakset.length; i++) {
      orgMap[aliakset[i]] = org;
    }
  }
});

var huomioLista = [];

var prosImsIdMap = {};
var kaikkiProsImsIdMap = {};
var prosTunnisteMap = {};
var prosDuplTunnisteMap = {};

$("business-process").filter(fth).each(function(pros) {
  var imsid = pros.prop("IMS ID");
  if (imsid > 0) {
    prosImsIdMap[imsid] = pros;
    kaikkiProsImsIdMap[imsid] = pros;
  }
  var tunniste = pros.prop("Tunniste");
  if (tunniste) tunniste = tunniste.trim();
  if (tunniste) {
    if (prosTunnisteMap[tunniste]) {
      var herja = "*** Tunniste \"" + tunniste + "\" löytyy Archista useammalla prosessilla. Tarkista tilanne."
      console.error(herja);
      huomioLista.push({ "Id": imsid, "Tunniste": tunniste, "IMS-nimi": pros.name, "Huomio": herja });
    }
    prosTunnisteMap[tunniste] = pros;
  }
});

var businessFolder = $("folder.Business").first();
var tiedonhallintamalliFolder = $("#"+businessFolder.id).find("folder.Tiedonhallintamalli").first();
if (tiedonhallintamalliFolder == null) {
  tiedonhallintamalliFolder = businessFolder.createFolder("Tiedonhallintamalli");
}
var prosessitFolder = $("#"+tiedonhallintamalliFolder.id).children("folder.Prosessihierarkia").first();
if (prosessitFolder == null) {
  prosessitFolder = tiedonhallintamalliFolder.createFolder("Prosessihierarkia");
}

var filePath = window.promptOpenFile({ title: "Avaa prosessilistaus CSV", filterExtensions: ["*.CSV"], fileName: "prosessit.csv" });
if (!filePath) {
  console.log("> Cancelled");
  exit();
}

var csvFile =  new java.io.InputStreamReader(new java.io.FileInputStream(filePath), "UTF-8");
console.log("> Encoding " + csvFile.getEncoding());

var csvtext ="";
var data = csvFile.read();
console.log("> Please Wait...");
while(data != -1) {
    if (data != 0xfeff) {  // skipataan mahdollinen UTF-8 byte order mark
      var merkki = String.fromCharCode(data);
      csvtext+=merkki;
    }
    data = csvFile.read();
}
csvFile.close();

console.log("> File loaded");
var parsedCsv = Papa.parse(csvtext, {header: true});
console.log("> File parsed");

var csvData = parsedCsv.data;
var csvMeta = parsedCsv.meta;

for (var kentta in imskentat) {
  if (csvMeta.fields.indexOf(kentta) < 0) {
    if (!window.confirm("CSV:stä ei löydy saraketta nimeltä \"" + kentta +"\". IMS listauksen tiedostomuoto on ehkä muuttunut ja import-skripti tulisi tarkistaa. Haluatko jatkaa?"))
      exit();
  }
}

/* console.log("Headers:");
for (var j = 0; j < csvMeta.fields.length; j++) {
  console.log("- " + j + ": " + csvMeta.fields[j]);
} */

var valitutRivit = [];
var nykyProsMap = {};

for (var i = 0; i < csvData.length - 1; i++) {
  var prosRivi = csvData[i];
  var imsId = prosRivi["Id"];
  var tunniste = prosRivi["Tunniste tiedonhallintamallissa *"];
  if (tunniste) tunniste = tunniste.trim();
  var nimi = prosRivi["Nimi"];

  var tunnisteNimessa = null;
  var match = tunnistePattern.exec(nimi);
  if (match) tunnisteNimessa = match[1];

  var herja = null;
  var nykyPros = prosMap[imsId];
  if (!tunniste && nykyPros) {   // ei tunnistetta, eli ei merkitty tiedonhallintamalliin kuuluvaksi
    herja = "** Prosessilla ei tunnistetta, mutta vastine löytyy Archista IMS ID:llä: " + nykyPros + " (ohitetaan)");
  } else if (!tunniste && tunnisteNimessa) {
    herja = "** Tunniste puuttuu, mutta nimen alku näyttää tunnisteelta (ohitetaan)";
  } else if (!tunniste) {
    continue;  // ei ilmeisesti kuulu tiedonhallintamalliin, mennään eteenpäin
  } else if (!tunnistePattern.exec(tunniste) || tunniste != tunnisteNimessa) {
    herja2 = "** Prosessin tunniste ei ole oikean muotoinen tai tunniste ei vastaa nimeä";
    console.error(herja2);
    if (window.confirm(herja2 + ": " + imsId + " " + tunniste + " / " + nimi + ". Ohitetaanko?")) {
      herja += " (ohitetaan)";
    } else {
      herja += " (jatketaan)";
      console.error(herja);
      huomioLista.push({ "Id": imsid, "Tunniste": tunniste, "IMS-nimi": pros.name, "Archi-nimi": nykyPros, "Huomio": herja });
      herja = null;
    }
  }

  if (!herja && prosDuplTunnisteMap[tunniste]) {
    var prosRivi2 = prosDuplTunnisteMap[tunniste];
    herja = "** Prosessi tulee uudestaan DUPLIKAATTINA prosessille " + prosRivi2["Id"] + " " + prosRivi2["Tunniste tiedonhallintamallissa *"] + " / " + prosRivi2["Nimi"] + " (ohitetaan)";
  }

  if (herja) {
    console.error(herja + ": " + imsId + " " + tunniste + " / " + nimi + " / " + nykyPros);
    huomioLista.push({ "Id": imsId, "Tunniste": tunniste, "IMS-nimi": nimi, "Archi-nimi": nykyPros, "Huomio": herja });
    continue;
  }

  if (!nykyPros) {
    nykyPros = prosTunnisteMap[tunniste];
    if (nykyPros) console.log("Prosessia ei löytynyt IMS ID:n perusteella. Löydettiin tunnisteen perusteella prosessille " + imsId + ": " + nimi + " vastine Archista: " + nykyPros);
  }

  if (!nykyPros && $("business-process." + nimi).filter(fth).size() > 0) {
    var herja = "*** Prosessi nimeltä " + nimi + " löytyi jo Archista mutta tuli uutena IMS importissa. Luodaan duplikaatti, tämä pitää korjata käsin.";
    console.error(herja);
    huomioLista.push({ "Id": imsId, "Tunniste": tunniste, "IMS-nimi": nimi, "Archi-nimi": nykyPros, "Huomio": herja });
    window.alert(herja);
  }

  prosDuplTunnisteMap[tunniste] = prosRivi;
  valitutRivit.push(prosRivi);
  if (nykyPros) nykyProsMap[imsId] = nykyPros;
}
console.log("> Rivit käsitelty ensimmäisen kerran");

var ajankohta = new Date();
var aikaleima = ajankohta.format("isoDateTime");
var muuttuneetPros = {};

for (var i = 0; i < valitutRivit.length - 1; i++) {
  var prosRivi = valitutRivit[i];
  var imsId = prosRivi["Id"];
  var tunniste = siisti(prosRivi["Tunniste tiedonhallintamallissa *"]);
  var nimi = siisti(prosRivi["Nimi"]);
  var nykyPros = nykyProsMap[imsId];

  if (nykyPros) {
    delete prosMap[imsId];   // poistetaan prosMapista, jotta sinne jää lopuksi ne mitä ei enää saatu IMS:stä
  } else {
    nykyPros = model.createElement("business-process", nimi);
    nykyPros.prop("_Tiedonhallintamalli", "1");
    nykyPros.prop("Tunniste", tunniste);
    nykyPros.prop("IMS ID", imsId);
    nykyPros.prop("IMS-linkki", prosRivi["Linkki"]);
    nykyPros.prop("_Päivitetty", aikaleima);
    muuttuneetPros[nykyPros.id] = "1";
    kaikkiProsImsIdMap[imsid] = nykyPros;
    console.log("+ Lisätty uusi prosessi " + nykyPros);
  }
}
console.log("> Rivit käsitelty toisen kerran");

var syoteLahdeMap = {};

for (var i = 0; i < valitutRivit.length - 1; i++) {
  var prosRivi = valitutRivit[i];
  var imsId = prosRivi["Id"];
  var tunniste = siisti(prosRivi["Tunniste tiedonhallintamallissa *"]);
  var nimi = siisti(prosRivi["Nimi"]);
  var nykyPros = nykyProsMap[imsId];

  var muutos = {};
  var vanha = {};

  if (nimi != nykyPros.name) {
    vanha["Nimi"] = nykyPros.name;
    muutos["Nimi"] = nimi;
    nykyPros.name = nimi;
  }
  if (tunniste != nykyPros.prop("Tunniste")) {
    var herja = "Tunniste muuttuu prosessilla " + nykyPros + ", vanha: \"" + nykyPros.prop("Tunniste") + "\", uusi: \"" + tunniste + "\"";
    console.error(herja);
    huomioLista.push({ "Id": imsId, "Tunniste": tunniste, "IMS-nimi": nimi, "Archi-nimi": nykyPros, "Huomio": herja });
    window.alert(herja);
    vanha["Tunniste"] = nykyPros.prop("Tunniste");
    muutos["Tunniste"] = tunniste;
    nykyPros.prop("Tunniste", tunniste);
  }
  var kuvaus = siisti(prosRivi["Prosessin kuvaus *"]);
  if (kuvaus != nykyPros.documentation) {
    vanha["Kuvaus"] = nykyPros.documentation;
    muutos["Kuvaus"] = kuvaus;
    nykyPros.documentation = kuvaus;
  }
  for (var kentta in imskentat) {
    if (imskentat[kentta]) {   // käsitellään tässä vain ne, joille ei ole erityiskäsittelyä
      if (prosRivi[kentta]) {
        var sisalto = siisti(prosRivi[kentta]);
        if (sisalto != nykyPros.prop(imskentat[kentta])) {  // kentällä on sisältöä csv:ssä ja se on eri kuin olemassa oleva tieto
          vanha[imskentat[kentta]] = nykyPros.prop(imskentat[kentta]);
          muutos[imskentat[kentta]] = sisalto;
          nykyPros.prop(imskentat[kentta], sisalto);
        }
      } else {
        if (nykyPros.prop(imskentat[kentta])) {  // kentällä ei ole sisältöä csv:ssä ja olemassa on jokin tieto
          console.log("POISTETAAN KENTTÄÄ " + imskentat[kentta] + " PROSESSILTA " + nykyPros.name);
          vanha[imskentat[kentta]] = nykyPros.prop(imskentat[kentta]);
          muutos[imskentat[kentta]] = "(POISTETTU)";
          nykyPros.removeProp(imskentat[kentta]);
        }
      }
    }
  }

  var nykyOmistajaRel = $("#"+nykyPros.id).inRels("association-relationship.vastaa").first();
  var nykyOmistaja = null;
  if (nykyOmistajaRel) nykyOmistaja = $("#"+nykyOmistajaRel.id).sourceEnds("business-actor").first();
  var uusiOmistaja = orgMap[prosRivi["Prosessin omistaja *"]];
  if (uusiOmistaja) {
    if (!nykyOmistaja || nykyOmistaja.id != uusiOmistaja.id) { // omistajatieto eroaa
      vanha["Omistaja"] = nykyOmistaja;
      if (nykyOmistaja) nykyOmistajaRel.delete();
      model.createRelationship("association-relationship", "vastaa", uusiOmistaja, nykyPros);
      nykyPros.prop("_Omistaja", uusiOmistaja.name);
      muutos["Omistaja"] = uusiOmistaja;
      console.log("VAIHDETAAN PROSESSIN " + nykyPros.name + " OMISTAJAKSI " + uusiOmistaja.name);
    } 
  } else {
    var herja = "Prosessin " + nykyPros.name + " IMS omistajatietoa vastaavaa organisaatiota ei löydy (" + prosRivi["Prosessin omistaja *"] + "). Omistajatieto jätetään asettamatta/muuttamatta (nykyisin " + nykyOmistaja + "). Korjaa puute ja aja import uudelleen.";
    huomioLista.push({ "Id": imsId, "Tunniste": tunniste, "IMS-nimi": nimi, "Archi-nimi": nykyPros, "Huomio": herja });
    console.error(herja);
  }

  var kansio = prosessitFolder;
  var imsYlaId = prosRivi["Yläprosessin id"];
  if (imsYlaId > 1) {
    var ylaPros = kaikkiProsMap[imsYlaId];
    if (ylaPros) {
      var ylaKansio = $("#"+ylaPros.id).parent("folder").first();
      kansio = ylaKansio.children("folder." + ylaPros.name);
      if (kansio == null) {
        kansio = ylaKansio.createFolder(ylaPros.name);
        console.log("  - Luotiin kansio " + kansio + " kansion " + ylaKansio + " alle");
      }
      var loytyi = false;
      $("#" + nykyPros.id).outRels("specialization-relationship").each(function (rel) {
        if (rel.target.id == ylaPros.id) loytyi = true;
        else {
          vanha["Yläprosessi"] = rel.target;
          rel.delete();
        }
      });
      if (!loytyi) {
        model.createRelationship("specialization-relationship", "", nykyPros, ylaPros);
        muutos["Yläprosessi"] = ylaPros;
      }
    } else {
      var herja = "*** Prosessin " + nykyPros + " yläprosessia ei löytynyt, viedään kansioon ORVOT.";
      console.error(herja);
      huomioLista.push({ "Id": imsId, "Tunniste": tunniste, "IMS-nimi": nimi, "Archi-nimi": nykyPros, "Huomio": herja });
      console.warning(herja);
      kansio = $("#"+prosessitFolder.id).children("folder.ORVOT").first();
      if (kansio == null) {
        kansio = prosessitFolder.createFolder("ORVOT");
      }
    }
  }
  kansio.add(nykyPros);

  var syoteteksti = nykyPros.prop("Saa syötteitä");
  while ((match = syotePattern.exec(syoteteksti)) !== null) {
    var syotePros = prosTunnisteMap[match[1]];
    if (syotePros) {
      if (!syoteLahdeMap[syotePros.id]) syoteLahdeMap[syotePros.id] = {};
      syoteLahdeMap[syotePros.id][nykyPros.id] = nykyPros;
    } else {
      var herja = "Prosessille merkitty saatava syöte " + match[1] + " jota vastaavaa prosessia ei löydy tunnisteella (ohitetaan)";
      console.log(herja);
      huomioLista.push({ "Id": imsId, "Tunniste": tunniste, "IMS-nimi": nimi, "Archi-nimi": nykyPros, "Huomio": herja });
    }
  }
  syoteteksti = nykyPros.prop("Tuottaa syötteitä");
  while ((match = syotePattern.exec(syoteteksti)) !== null) {
    var syotePros = prosTunnisteMap[match[1]];
    if (syotePros) {
      if (!syoteLahdeMap[nykyPros.id]) syoteLahdeMap[nykyPros.id] = {};
      syoteLahdeMap[nykyPros.id][syotePros.id] = syotePros;
    } else {
      var herja = "Prosessille merkitty tuotettava syöte " + match[1] + " jota vastaavaa prosessia ei löydy tunnisteella (ohitetaan)";
      console.log(herja);
      huomioLista.push({ "Id": imsId, "Tunniste": tunniste, "IMS-nimi": nimi, "Archi-nimi": nykyPros, "Huomio": herja });
    }
  }

  var muutoksia = 0;
  for (var muuttunut in muutos) {
    muutoksia++;
  }
  if (muutoksia) {
    muuttuneetPros[nykyPros.id] = "1";
    nykyPros.prop("_Päivitetty", aikaleima);
    console.log("- Prosessin " + nykyPros.name + " tietoja muuttunut:");
    for (var muuttunut in muutos) {
      console.log("  - " + muuttunut + " muuttunut: \"" + vanha[muuttunut] + "\" -> \"" + muutos[muuttunut] + "\"");
    }
  } /* else {
    console.log("- Prosessilla " + nykyPros.name + " ei muuttuneita tietoja.");
  } */

}  // CSV-rivien looppi

console.log("> Käsitellään syötteet");
for (var lahdeProsId in syoteLahdeMap) {
  var lahdePros = $("#" + lahdeProsId).first();
  var kohdeMap = syoteLahdeMap[lahdeProsId];
  lahdePros.outRels("flow-relationship.syöte").each(function (rel) {
    if (kohdeMap[rel.target.id]) {
      delete kohdeMap[rel.target.id];
    } else {
      console.log("Prosessi " + rel.target.name + " ei saa enää syötettä prosessilta " + rel.source.name + ", poistetaan relaatio.");
      rel.delete();
    }
  });
  for (var puuttuvaId in kohdeMap) {
    var kohdePros = $("#" + kohdeMap[puuttuvaId]).first();
    console.log("Lisätään uusi syöterelaatio prosessista " + lahdePros.name + " prosessiin " + kohdePros.name);
    model.createRelationship("flow-relationship", "syöte", lahdePros, kohdePros);
  }
}

console.log("> Käsitellään mahdolliset poistuneet prosessit");
for (var poistunutId in prosMap) {  // Jäljellä vain salkussa olleet joita ei enää näy!
  var poistunutPros = prosMap[poistunutId];
  console.log("PROSESSI " + poistunutPros.name + " POISTUNUT IMS:STÄ, MERKITÄÄN POISTUNEEKSI");
  poistunutPros.name = poistunutPros.name + " (POISTUNUT IMS:STÄ)";
  poistunutPros.prop("_Poistuneeksi merkitty", aikaleima);
  poistunutPros.prop("_Päivitetty", aikaleima);
  /*  var kansio = $("#"+prosessitFolder.id).children("folder.POISTUNEET").first();
  if (kansio == null) {
    kansio = prosessitFolder.createFolder("POISTUNEET");
  }
  kansio.add(poistunutPros); */
}

// TODO: pitäisi käydä läpi prosessihierarkian alikansiot ja poistaa tyhjät

model.prop("Päivitetty IMS:stä", aikaleima);
console.log("> Parsing Complete")

if (huomioLista.length > 0) {
  console.log("> Kirjoitetaan huomiolista (paina cancel jos et halua tallentaa)");
  var outCsvHeaders = [
    "Id",
    "Tunniste",
    "IMS-nimi",
    "Archi-nimi",
    "Huomio"
  ];
  var exportFile = window.promptSaveFile({ title: "Viedään huomiot CSV:ksi", filterExtensions: ["*.csv"], fileName: "prosessien-huomiot-" + ajankohta.format("yyyymmddHHMMss") + ".csv" });
  if (exportFile) {
    var outCSV = Papa.unparse({ fields: outCsvHeaders, data: outCsvData });
    $.fs.writeFile(exportFile, outCSV);
    console.log("> Tiedosto kirjoitettu");
  } else {
    console.log("> Huomioiden kirjoitus peruttiin");
  }
}

var selection = $("empty");
for (var prosid in muuttuneetPros) {
  selection.add($("#"+prosid));
}
if (selection.size() > 0) {
  if (window.confirm("Päivitetäänkö muuttuneiden prosessien näkymät (" + selection.size() + " kpl)?")) {
    var korvaakaikki = 1;
    load(__SCRIPTS_DIR__ + "Tiedonhallintamalli/Luo näkymä prosessille.ajs");
    // TODO miten yläprosessien ja aliprosessien näkymät, pitääkö ne myös päivittää?
  }
}
console.log("> Valmis");
