/*
/*
 * Skripti, jolla prosessien tiedot päivitetään lukemalla Espoon IMS:stä viedystä 
 * CSV-tiedostosta käyttäen Papa Parse kirjastoa.
 *
 * DONE: ehkä prosessien matchays nykyprosesseihin ensin omassa loopissaan
 * DONE: yläprosessi-alaprosessi relaatioiden laitto
 * DONE: saa/tuottaa syötteitä relaatioiden laitto
 * DONE: huomautuslista CSV
 * 
 */

"use strict";

/* var tunnisteOverride = {
  18324: "O5.1",
  jne.
}; */

var tunnistePattern = /^(([OT]|Y[AJP]?)?\d+\.(\d+|\d+(\.\d+)*)?)($|[^0-9\.])/;
var syotePattern = /(([OT]|Y[AJP]?)\d+(\.\d+)+)($|[^0-9\.])/g;   // ei tunnista toimialatasoa (pitää olla vähintään kaksitasoinen x.y) ja kirjainetuliite pitää löytyä, ettei tule virhematcheja

var imskentat = {
  "Nimi": null,  // käsitellään erikseen
  "Id": "IMS ID",  // käsitellään myös erikseen
  "Yläprosessin id": null,  // käsitellään erikseen
  "Tunniste tiedonhallintamallissa *": null,  // käsitellään erikseen
  "Prosessin kuvaus *": null,  // käsitellään erikseen
  "Omistava tulosyksikkö **": null,  // käsitellään erikseen
  "Linkki": null, // käsitellään erikseen

  "Lopputuotos (palvelu/asiakirja) *": "Prosessissa syntyvä lopputuotos",
  "Prosessi saa syötteitä *": "Saa syötteitä",
  "Prosessi tuottaa syötteitä *": "Tuottaa syötteitä",
  "Prosessin omistuksen lisätieto *": "Omistuksen lisätieto",
  "Koskee asianhallintaa *": "_Koskee asianhallintaa IMS"  // käsitellään MYÖS erikseen
};

function siisti(arvo) {
  var patt = /\r?\n/g;
  return arvo.trim().replace(patt, ", ");
}

var HERJA_KONSOLIINFO = 1;
var HERJA_KONSOLIVIRHE = 2;
var HERJA_VAROITUSIKKUNA = 3;
var HERJA_KASITELLAANKOIKKUNA = 4;

function herjaa(huomioLista, lajiteksti, yksilointi, imsId, tunniste, imsNimi, archiPros, kasittely) {
  if (kasittely === undefined) kasittely = HERJA_KONSOLIVIRHE;
  var herja = "[Prosessi " + imsId + ": " + imsNimi + "] " + lajiteksti + (yksilointi ? " " + yksilointi : "") + " (" + tunniste + " / " + archiPros + ")";
  var huomiorivi = { "Id": imsId, "Tunniste": tunniste, "IMS-nimi": imsNimi, "Archi-nimi": archiPros, "Huomio": lajiteksti, "Yksilöinti": yksilointi };
  if (huomioLista) huomioLista.push(huomiorivi);
  switch (kasittely) {
    case HERJA_KONSOLIINFO:
      console.log(herja);
      break;
    case HERJA_KONSOLIVIRHE:
      console.error(herja);
      break;
    case HERJA_VAROITUSIKKUNA:
      console.error(herja);
      window.alert(herja);
      break;
    case HERJA_KASITELLAANKOIKKUNA:
      var result = window.confirm(herja + "; Käsitelläänkö?");
      var resultText = result ? " (Käsitellään silti)" : " (Ohitetaan)";
      console.error(herja + resultText);
      huomiorivi["Yksilöinti"] += resultText;
      return result;
  }
  return true;
}

console.show();
console.clear();

console.log("> Import CSV");
load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");
load(__SCRIPTS_DIR__ + "~lib/papaparse.min.js");
console.log("> Loaded Papa Parse");

var imsUrl = model.prop("_IMSURL");

var orgMap = {};
$("business-actor").filter(fth).each(function(org) { 	// ensin organisaatiot omilla nimillään
  orgMap[org.name] = org;
});
$("business-actor").filter(fth).each(function(org) {	// sitten IMS-aliaksin 
  var aliakset = org.prop("_NimiIMSssä", true);
  if (aliakset) {
    for (var i=0; i<aliakset.length; i++) {
      orgMap[aliakset[i]] = org;
    }
  }
});

var huomioLista = [];

var prosArchiIdMap = {};
var kaikkiProsImsIdMap = {};
var prosTunnisteMap = {};
var prosDuplTunnisteMap = {};
var prosRiviImsIdMap = {};

$("business-process").filter(fth).each(function (pros) {
  prosArchiIdMap[pros.id] = pros;
  var imsid = pros.prop("IMS ID");
  if (imsid > 0) {
    kaikkiProsImsIdMap[imsid] = pros;
  }
  var tunniste = pros.prop("Tunniste");
  if (tunniste) tunniste = tunniste.trim();
  if (tunniste) {
    if (prosTunnisteMap[tunniste]) {
      herjaa(huomioLista, "*** Tunniste löytyy Archista useammalla prosessilla. Tarkista tilanne.", tunniste, imsid, tunniste);
    }
    prosTunnisteMap[tunniste] = pros;
  }
});

var businessFolder = $("folder.Business").first();
var tiedonhallintamalliFolder = $("#"+businessFolder.id).find("folder.Tiedonhallintamalli").first();
if (tiedonhallintamalliFolder == null) {
  tiedonhallintamalliFolder = businessFolder.createFolder("Tiedonhallintamalli");
}
var prosessitFolder = $("#"+tiedonhallintamalliFolder.id).children("folder.Prosessihierarkia").first();
if (prosessitFolder == null) {
  prosessitFolder = tiedonhallintamalliFolder.createFolder("Prosessihierarkia");
}

var filePath = window.promptOpenFile({ title: "Avaa prosessilistaus CSV", filterExtensions: ["*.CSV"], fileName: "prosessit.csv" });
if (!filePath) {
  console.log("> Cancelled");
  exit();
}

var csvFile = new java.io.InputStreamReader(new java.io.FileInputStream(filePath), "ISO-8859-1"); // "UTF-8");
console.log("> Encoding " + csvFile.getEncoding());

var csvtext ="";
var data = csvFile.read();
console.log("> Please Wait...");
while(data != -1) {
    if (data != 0xfeff) {  // skipataan mahdollinen UTF-8 byte order mark
      var merkki = String.fromCharCode(data);
      csvtext+=merkki;
    }
    data = csvFile.read();
}
csvFile.close();

console.log("> File loaded");
var parsedCsv = Papa.parse(csvtext, {header: true});
console.log("> File parsed");

var csvData = parsedCsv.data;
var csvMeta = parsedCsv.meta;
/* console.log("> csvData.length = " + csvData.length);
for (var i = 0; i < csvMeta.fields.length; i++) {
  console.log("fields[" + i + "] = " + csvMeta.fields[i]);
} */

for (var kentta in imskentat) {
  if (csvMeta.fields.indexOf(kentta) < 0) {
    if (!window.confirm("CSV:stä ei löydy saraketta nimeltä \"" + kentta +"\". IMS listauksen tiedostomuoto on ehkä muuttunut ja import-skripti tulisi tarkistaa. Haluatko jatkaa?"))
      exit();
  }
}

/* console.log("Headers:");
for (var j = 0; j < csvMeta.fields.length; j++) {
  console.log("- " + j + ": " + csvMeta.fields[j]);
} */

for (var i = 0; i < csvData.length; i++) {
  var prosRivi = csvData[i];
  var imsId = prosRivi["Id"];
  if (!imsId) {
    console.log("Ohitettiin tyhjä rivi rivllä nro " + i);
    continue;
  }
  prosRiviImsIdMap[imsId] = prosRivi;
}
console.log("> Rivit esikäsitelty");

var valitutRivit = [];
var nykyProsMap = {};

prosriviloop: for (var i = 0; i < csvData.length; i++) {
  var prosRivi = csvData[i];
  var imsId = prosRivi["Id"];
  if (!imsId) {
    console.log("Ohitettiin tyhjä rivi rivllä nro " + i);
    continue;
  }
  var tunniste = prosRivi["Tunniste tiedonhallintamallissa *"];
  if (tunniste) tunniste = tunniste.trim();
  var nimi = prosRivi["Nimi"];

  if ("poistettu" == tunniste) continue prosriviloop;  // ohitetaan tiedonhallintamallista poistetuksi merkityt

  var ylaProsHakuId = prosRivi["Yläprosessin id"];
  while (imsId != 1 && ylaProsHakuId != 1) {  // tarkistetaan, että prosessin kaikki yläprosessit löytyvät (ettei ole poistetun prosessin alla oleva irtolainen)
    if (!prosRiviImsIdMap[ylaProsHakuId]) {
      if (tunniste) {
        // herjataan vain jos irtoprosessille on jäänyt tiedonhallintamallin tunniste, muuten ei välitetä
        herjaa(huomioLista, "Prosessin yläprosessi puuttuu listalta, ohitetaan", null, imsId, tunniste, nimi, null, HERJA_KONSOLIINFO);
      }
      delete prosRiviImsIdMap[imsId];
      continue prosriviloop;
    }
    var ylaProsRivi = prosRiviImsIdMap[ylaProsHakuId];
    var ylaProsTunniste = ylaProsRivi["Tunniste tiedonhallintamallissa *"];
    if (ylaProsTunniste) ylaProsTunniste = ylaProsTunniste.trim();
    if (tunniste && ylaProsTunniste == "poistettu") {  // ei jatketa myöskään jos yläprosessi on merkitty poistetuksi tiedonhallintamallista, vaikka aliprosesseilla olisikin tunnisteita
      herjaa(huomioLista, "Prosessin yläprosessilla ei ole tiedonhallintamallin tunnistetta, ohitetaan", ylaProsRivi["nimi"], imsId, tunniste, nimi, null, HERJA_KONSOLIINFO);
      delete prosRiviImsIdMap[imsId];
      continue prosriviloop;
    }
    ylaProsHakuId = ylaProsRivi["Yläprosessin id"];
  }

  var tunnisteNimessa = null;
  var match = tunnistePattern.exec(nimi);
  if (match) tunnisteNimessa = match[1];

  var herja = null;
  var yksilointi = null;
  var nykyPros = kaikkiProsImsIdMap[imsId];
  if (!tunniste && nykyPros) {   // ei tunnistetta, eli ei merkitty tiedonhallintamalliin kuuluvaksi
    herja = "** Prosessilla ei tunnistetta, mutta vastine löytyy Archista IMS ID:llä (ohitetaan)";
    yksilointi = nykyPros;
  } else if (!tunniste && tunnisteNimessa) {
    herja = "** Tunniste puuttuu, mutta nimen alku näyttää tunnisteelta (ohitetaan)";
  } else if (!tunniste) {
    continue;  // ei ilmeisesti kuulu tiedonhallintamalliin, mennään eteenpäin
  } else if (!tunnistePattern.exec(tunniste) || tunniste != tunnisteNimessa) {
    var kasitellaan = herjaa(huomioLista, "** Prosessin tunniste ei ole oikean muotoinen tai tunniste ei vastaa nimeä", tunniste, imsId, tunniste, nimi, nykyPros, HERJA_KASITELLAANKOIKKUNA);
    if (!kasitellaan) continue;
    nimi = "(" + tunniste + "/VIRHEELLINEN) " + nimi;
    prosRivi["Nimi"] = nimi;
  }

  if (!herja && prosDuplTunnisteMap[tunniste]) {
    var prosRivi2 = prosDuplTunnisteMap[tunniste];
    herja = "** Prosessi tulee uudestaan DUPLIKAATTINA prosessille (ohitetaan)";
    yksilointi = prosRivi2["Id"] + " " + prosRivi2["Tunniste tiedonhallintamallissa *"] + " / " + prosRivi2["Nimi"];
  }

  if (herja) {
    herjaa(huomioLista, herja, yksilointi, imsId, tunniste, nimi, nykyPros);
    continue;
  }

  if (!nykyPros) {
    nykyPros = prosTunnisteMap[tunniste];
    if (nykyPros) {
      herjaa(huomioLista, "Prosessia ei löytynyt IMS ID: n perusteella. Löydettiin tunnisteen perusteella prosessille vastine Archista", null, imsId, tunniste, nimi, nykyPros, HERJA_KONSOLIINFO);
      kaikkiProsImsIdMap[imsId] = nykyPros;
    }
  }

  if (!nykyPros && $("business-process." + nimi).filter(fth).size() > 0) {
    var herja = "*** Prosessi nimeltä " + nimi + " löytyi jo Archista mutta tuli uutena IMS importissa. Luodaan duplikaatti, tämä pitää korjata käsin.";
    herjaa(huomioLista, "Prosessi löytyi jo Archista mutta tuli uutena IMS importissa. Luodaan duplikaatti, tämä pitää korjata käsin.", null, imsId, tunniste, nimi, nykyPros, HERJA_VAROITUSIKKUNA);
  }

  prosDuplTunnisteMap[tunniste] = prosRivi;
  prosRiviImsIdMap[imsId] = prosRivi;
  valitutRivit.push(prosRivi);
  if (nykyPros) nykyProsMap[imsId] = nykyPros;
}
console.log("> Rivit käsitelty ensimmäisen kerran");

var ajankohta = new Date();
var aikaleima = ajankohta.format("isoDateTime");
//var muuttuneetPros = {};

for (var i = 0; i < valitutRivit.length; i++) {
  var prosRivi = valitutRivit[i];
  var imsId = prosRivi["Id"];
  var tunniste = siisti(prosRivi["Tunniste tiedonhallintamallissa *"]);
  if (!tunniste && tunnisteOverride[imsId]) tunniste = tunnisteOverride[imsId];
  var nimi = siisti(prosRivi["Nimi"]);
  var nykyPros = nykyProsMap[imsId];

  if (nykyPros) {
    delete prosArchiIdMap[nykyPros.id];   // poistetaan prosMapista, jotta sinne jää lopuksi ne mitä ei enää saatu IMS:stä
  } else {
    nykyPros = model.createElement("business-process", nimi);
    nykyPros.prop("_Tiedonhallintamalli", "1");
    nykyPros.prop("Tunniste", tunniste);
    nykyPros.prop("IMS ID", imsId);
    nykyPros.prop("IMS-linkki", imsUrl.replace("[IMSID]", imsId));
    nykyPros.prop("_Päivitetty", aikaleima);
    nykyPros.prop("_TunnistePäivitetty", aikaleima);
    nykyPros.prop("_NimiPäivitetty", aikaleima);
    muuttunutMerkinta(nykyPros, null, aikaleima);
    //muuttuneetPros[nykyPros.id] = "1";
    kaikkiProsImsIdMap[imsId] = nykyPros;
    nykyProsMap[imsId] = nykyPros;
    console.log("+ Lisätty uusi prosessi " + nykyPros);
  }
}
console.log("> Rivit käsitelty toisen kerran");

var syoteLahdeMap = {};

for (var i = 0; i < valitutRivit.length; i++) {
  var prosRivi = valitutRivit[i];
  var imsId = prosRivi["Id"];
  var tunniste = siisti(prosRivi["Tunniste tiedonhallintamallissa *"]);
  if (!tunniste && tunnisteOverride[imsId]) tunniste = tunnisteOverride[imsId];
  var nimi = siisti(prosRivi["Nimi"]);
  var nykyPros = nykyProsMap[imsId];
  if (!nykyPros) console.error("NYKYPROS EI LÖYDY !!!!!!!!! " + imsId + " " + nimi + " - miten tähän on tultu?!");

  var muutos = {};
  var vanha = {};

  if (nimi != nykyPros.name) {
    vanha["Nimi"] = nykyPros.name;
    muutos["Nimi"] = nimi;
    nykyPros.name = nimi;
    nykyPros.prop("_NimiPäivitetty", aikaleima);
    muuttunutMerkinta(nykyPros, null, aikaleima); // näkymän päivitys oikealle nimelle
  }
  if (tunniste != nykyPros.prop("Tunniste")) {
    herjaa(huomioLista, "PROSESSIN TUNNISTE MUUTTUU", "Vanha: \"" + nykyPros.prop("Tunniste") + "\", uusi: \"" + tunniste + "\"",
      imsId, tunniste, nimi, nykyPros, HERJA_VAROITUSIKKUNA);
    vanha["Tunniste"] = nykyPros.prop("Tunniste");
    delete prosTunnisteMap[nykyPros.prop("Tunniste")];
    muutos["Tunniste"] = tunniste;
    nykyPros.prop("Tunniste", tunniste);
    prosTunnisteMap[tunniste] = nykyPros;
    nykyPros.prop("_TunnistePäivitetty", aikaleima);
    var vanhatunniste = nykyPros.prop("_VanhaTunniste") ? nykyPros.prop("_VanhaTunniste") + "; " : "";
    nykyPros.prop("_VanhaTunniste", vanhatunniste + vanha["Tunniste"]);
  }
  var kuvaus = siisti(prosRivi["Prosessin kuvaus *"]);
  if (kuvaus != nykyPros.documentation) {
    vanha["Kuvaus"] = nykyPros.documentation;
    muutos["Kuvaus"] = kuvaus;
    nykyPros.documentation = kuvaus;
  }
  var imsLinkki = imsUrl.replace("[IMSID]", imsId);
  if (imsLinkki != nykyPros.prop("IMS-linkki")) {
    vanha["IMS-linkki"] = nykyPros.prop("IMS-linkki");
    muutos["IMS-linkki"] = imsLinkki;
    nykyPros.prop("IMS-linkki", imsLinkki);
  }
  for (var kentta in imskentat) {
    if (imskentat[kentta]) {   // käsitellään tässä vain ne, joille ei ole erityiskäsittelyä
      if (prosRivi[kentta]) {
        var sisalto = siisti(prosRivi[kentta]);
        if (sisalto != nykyPros.prop(imskentat[kentta])) {  // kentällä on sisältöä csv:ssä ja se on eri kuin olemassa oleva tieto
          vanha[imskentat[kentta]] = nykyPros.prop(imskentat[kentta]);
          muutos[imskentat[kentta]] = sisalto;
          nykyPros.prop(imskentat[kentta], sisalto);
        }
      } else {
        if (nykyPros.prop(imskentat[kentta])) {  // kentällä ei ole sisältöä csv:ssä ja olemassa on jokin tieto
          console.log("POISTETAAN KENTTÄÄ " + imskentat[kentta] + " PROSESSILTA " + nykyPros.name);
          vanha[imskentat[kentta]] = nykyPros.prop(imskentat[kentta]);
          muutos[imskentat[kentta]] = "(POISTETTU)";
          nykyPros.removeProp(imskentat[kentta]);
        }
      }
    }
  }
  var asianhallinta = null2e(prosRivi["Koskee asianhallintaa *"]).trim();  // käsitellään MYÖS erikseen
  if (asianhallinta) {
    var uusiah = "Ei";
    if (asianhallinta.toLowerCase().startsWith("k")) uusiah = "Kyllä";
    if (uusiah != nykyPros.prop("Koskee asianhallintaa")) {
      vanha["Koskee asianhallintaa"] = nykyPros.prop("Koskee asianhallintaa");
      muutos["Koskee asianhallintaa"] = uusiah;
      nykyPros.prop("Koskee asianhallintaa", uusiah);
    }
  }


  var nykyOmistajaRel = $("#"+nykyPros.id).inRels("association-relationship.vastaa").first();
  var nykyOmistaja = null;
  if (nykyOmistajaRel) nykyOmistaja = $("#"+nykyOmistajaRel.id).sourceEnds("business-actor").first();
  var uusiOmistaja = orgMap[prosRivi["Omistava tulosyksikkö **"].trim()];
  if (!uusiOmistaja) {
    // jos omistavaa tulosyksikköä ei annettu tällä tasolla, käydään läpi yläprosessit kunnes (jos) löydetään
    var hakuImsId = imsId;
    var hakuTasoja = 20; // varmistetaan ettei jäädä loputtomaan silmukkaan
    while (!uusiOmistaja && hakuImsId && hakuTasoja-- > 0) {
      hakuImsId = prosRiviImsIdMap[hakuImsId]["Yläprosessin id"];
      var ylaOmistajaRivi = prosRiviImsIdMap[hakuImsId];
      if (!ylaOmistajaRivi) {
        herjaa(huomioLista, "Prosessin omistajatietoa haettaessa törmättiin ongelmaan ettei yläprosessia löydy tiedonhallintamalliin kuuluviksi merkittyjen rivien joukosta",
          "Yläprosessi " + hakuImsId, imsId, tunniste, nimi, nykyPros);
        break;
      }
      uusiOmistaja = orgMap[ylaOmistajaRivi["Omistava tulosyksikkö **"].trim()];
    }
  }
  if (uusiOmistaja) {
    if (!nykyOmistaja || nykyOmistaja.id != uusiOmistaja.id) { // omistajatieto eroaa
      vanha["Omistaja"] = nykyOmistaja;
      if (nykyOmistaja) nykyOmistajaRel.delete();
      model.createRelationship("association-relationship", "vastaa", uusiOmistaja, nykyPros);
      nykyPros.prop("Omistaja", uusiOmistaja.name);
      muutos["Omistaja"] = uusiOmistaja;
      console.log("VAIHDETAAN PROSESSIN " + nykyPros.name + " OMISTAJAKSI " + uusiOmistaja.name + " (aiempi oli " + nykyOmistaja + ")");
      muuttunutMerkinta(nykyPros, null, aikaleima);  // näkymän päivitys oikeaan kansioon
    } 
  } else {
    herjaa(huomioLista, "Prosessin IMS omistajatietoa vastaavaa organisaatiota ei löydy. Omistajatieto jätetään asettamatta/muuttamatta. Korjaa puute ja aja import uudelleen.",
      "IMS-tieto: " + prosRivi["Prosessin omistaja *"] + ", nykyinen omistaja " + nykyOmistaja,
      imsId, tunniste, nimi, nykyPros);
  }

  var maxKansiot = 20;

  var varmistaKansio = function (tamaImsId) {
    if (!(maxKansiot-- > 0)) return null;  // estetään ikuinen silmukka jos datassa virhe
    var tamaProsRivi = prosRiviImsIdMap[tamaImsId];
    if (!tamaProsRivi) {
      herjaa(huomioLista, "tamaProsRivi NULL", tamaImsId, imsId, tunniste, nimi, nykyPros, HERJA_VAROITUSIKKUNA);
      return null;
    }
    var imsYlaId = tamaProsRivi["Yläprosessin id"];
    //console.log("Selvitetään kansiota, tamaImsId=" + tamaImsId + ", imsYlaId=" + imsYlaId);
    if (imsYlaId > 1) {
      var ylaKansio = varmistaKansio(imsYlaId);
      if (!ylaKansio) return null;
      var ylaPros = kaikkiProsImsIdMap[imsYlaId];
      if (!ylaPros) return null;
      var kansio = $("#" + ylaKansio.id).children("folder." + ylaPros.name).first();
      if (kansio == null) {
        kansio = ylaKansio.createFolder(ylaPros.name);
        console.log("  - Luotiin kansio " + kansio + " kansion " + ylaKansio + " alle");
      }
      return kansio;
    } else if (imsYlaId == 1) {
      return prosessitFolder;
    }
    return null;
  }

  var kansio = varmistaKansio(imsId);
  if (!kansio) {
    herjaa(huomioLista, "*** Prosessin oikeaa kansiota ei pystytty selvittämään, viedään kansioon ORVOT.", "Yläprosessin IMS-id " + imsYlaId,
      imsId, tunniste, nimi, nykyPros);
    kansio = $("#" + prosessitFolder.id).children("folder.ORVOT").first();
    if (kansio == null) {
      kansio = prosessitFolder.createFolder("ORVOT");
    }
  }
  //if (!window.confirm(kansio)) exit();
  kansio.add(nykyPros);

  var imsYlaId = prosRivi["Yläprosessin id"];
  if (imsYlaId > 1) {
    var ylaPros = kaikkiProsImsIdMap[imsYlaId];
    if (ylaPros) {
      var loytyi = false;
      $("#" + nykyPros.id).outRels("specialization-relationship").each(function (rel) {
        if (rel.target.id == ylaPros.id) loytyi = true;
        else {
          vanha["Yläprosessi"] = rel.target;
          rel.delete();
          muuttunutMerkinta(nykyPros, ylaPros, aikaleima);
        }
      });
      if (!loytyi) {
        model.createRelationship("specialization-relationship", "", nykyPros, ylaPros);
        muuttunutMerkinta(nykyPros, ylaPros, aikaleima);
      }
    }
  }

  var syoteteksti = nykyPros.prop("Saa syötteitä");
  while ((match = syotePattern.exec(syoteteksti)) !== null) {
    var syotePros = prosTunnisteMap[match[1]];
    if (syotePros) {
      if (!syoteLahdeMap[syotePros.id]) syoteLahdeMap[syotePros.id] = {};
      var tiedot = syoteLahdeMap[syotePros.id][nykyPros.id];
      if (!tiedot) tiedot = syoteLahdeMap[syotePros.id][nykyPros.id] = {};
      tiedot.kohdePros = nykyPros;
      tiedot.kohteelta = true;
    } else {
      herjaa(huomioLista, "Prosessille merkitty saatava syöte, jota vastaavaa prosessia ei löydy tunnisteella (ohitetaan).", match[1],
        imsId, tunniste, nimi, nykyPros, HERJA_KONSOLIINFO);
    }
  }
  syoteteksti = nykyPros.prop("Tuottaa syötteitä");
  while ((match = syotePattern.exec(syoteteksti)) !== null) {
    var syotePros = prosTunnisteMap[match[1]];
    if (syotePros) {
      if (!syoteLahdeMap[nykyPros.id]) syoteLahdeMap[nykyPros.id] = {};
      var tiedot = syoteLahdeMap[nykyPros.id][syotePros.id];
      if (!tiedot) tiedot = syoteLahdeMap[nykyPros.id][syotePros.id] = {};
      tiedot.kohdePros = syotePros;
      tiedot.lahteelta = true;
    } else {
      herjaa(huomioLista, "Prosessille merkitty tuotettava syöte, jota vastaavaa prosessia ei löydy tunnisteella (ohitetaan).", match[1],
        imsId, tunniste, nimi, nykyPros, HERJA_KONSOLIINFO);
    }
  }

  var muutoksia = 0;
  for (var muuttunut in muutos) {
    muutoksia++;
  }
  if (muutoksia) {
    //muuttuneetPros[nykyPros.id] = "1";
    nykyPros.prop("_Päivitetty", aikaleima);
    console.log("* Prosessin " + nykyPros.name + " tietoja muuttunut:");
    for (var muuttunut in muutos) {
      console.log("  - " + muuttunut + " muuttunut: \"" + vanha[muuttunut] + "\" -> \"" + muutos[muuttunut] + "\"");
    }
  } /* else {
    console.log("- Prosessilla " + nykyPros.name + " ei muuttuneita tietoja.");
  } */

}  // CSV-rivien looppi

console.log("> Käsitellään syötteet");
$("business-process").filter(fth).each(function (pros) {
  if (syoteLahdeMap[pros.id]) {
    var kohdeMap = syoteLahdeMap[pros.id];
    $("#" + pros.id).outRels("flow-relationship").each(function (rel) {
      if (kohdeMap[rel.target.id]) {
        var tiedot = kohdeMap[rel.target.id];
        rel.name = (tiedot.lahteelta ? "." : "") + "syöte" + (tiedot.kohteelta ? "." : "");
        if (tiedot.lahteelta) rel.prop("_Lähteeltä", "1"); else rel.removeProp("_Lähteeltä");
        if (tiedot.kohteelta) rel.prop("_Kohteelta", "1"); else rel.removeProp("_Kohteelta");
        delete kohdeMap[rel.target.id];
      } else {
        console.log("Prosessi " + rel.target.name + " ei saa enää syötettä prosessilta " + rel.source.name + ", poistetaan relaatio.");
        muuttunutMerkinta(rel.source, rel.target, aikaleima);
        rel.delete();
      }
    });
    for (var puuttuvaId in kohdeMap) {
      var tiedot = kohdeMap[puuttuvaId];
      console.log("Lisätään uusi syöterelaatio prosessista " + pros.name + " prosessiin " + tiedot.kohdePros.name);
      var rel = model.createRelationship("flow-relationship",
        (tiedot.lahteelta ? "." : "") + "syöte" + (tiedot.kohteelta ? "." : ""),
        pros,
        tiedot.kohdePros);
      if (tiedot.lahteelta) rel.prop("_Lähteeltä", "1"); else rel.removeProp("_Lähteeltä");
      if (tiedot.kohteelta) rel.prop("_Kohteelta", "1"); else rel.removeProp("_Kohteelta");
      muuttunutMerkinta(pros, tiedot.kohdePros, aikaleima);
    }
  } else {  // prosessilta ei lähde enää ollenkaan syötteitä, poistetaan mahdolliset olemassa olevat lähetävät
    $("#" + pros.id).outRels("flow-relationship").each(function (rel) {
      console.log("Prosessi " + rel.target.name + " ei saa enää syötettä prosessilta " + rel.source.name + ", poistetaan relaatio.");
      muuttunutMerkinta(rel.source, rel.target, aikaleima);
      rel.delete();
    });
  }
});  // prosessien looppi syötteiden läpikäymiseksi

console.log("> Käsitellään mahdolliset poistuneet prosessit");
for (var poistunutId in prosArchiIdMap) {  // Jäljellä vain salkussa olleet joita ei enää näy!
  var poistunutPros = prosArchiIdMap[poistunutId];
  herjaa(huomioLista, "PROSESSI POISTUNUT IMS:STÄ, MERKITÄÄN POISTUNEEKSI", poistunutPros, null, null, null, null, HERJA_KONSOLIINFO);
  if (!poistunutPros.name.endsWith("(POISTUNUT IMS:STÄ)")) poistunutPros.name = poistunutPros.name + " (POISTUNUT IMS:STÄ)";
  poistunutPros.prop("_Poistuneeksi merkitty", aikaleima);
  poistunutPros.prop("_Päivitetty", aikaleima);
  $("#" + poistunutPros.id).outRels("specialization-relationship").each(function (rel) {
    muuttunutMerkinta(rel.source, rel.target, aikaleima); // merkataan varuiksi poistuneen mahdollinen ylärposessikin muuttuneeksi
  });
  var kansio = $("#"+prosessitFolder.id).children("folder.POISTUNEET").first();
  if (kansio == null) {
    kansio = prosessitFolder.createFolder("POISTUNEET");
  }
  kansio.add(poistunutPros);
}

// TODO: pitäisi käydä läpi prosessihierarkian alikansiot ja poistaa tyhjät

model.prop("Päivitetty IMS:stä", aikaleima);
console.log("> Parsing Complete")

if (huomioLista.length > 0) {
  console.log("> Kirjoitetaan huomiolista (paina cancel jos et halua tallentaa)");
  var outCsvHeaders = [
    "Id",
    "Tunniste",
    "IMS-nimi",
    "Archi-nimi",
    "Huomio",
    "Yksilöinti"
  ];
  var exportFile = window.promptSaveFile({ title: "Viedään huomiot CSV:ksi", filterExtensions: ["*.csv"], fileName: "prosessien-huomiot-" + ajankohta.format("yyyymmddHHMMss") + ".csv" });
  if (exportFile) {
    var outCSV = Papa.unparse({ fields: outCsvHeaders, data: huomioLista });
    $.fs.writeFile(exportFile, outCSV);
    console.log("> Tiedosto kirjoitettu");
  } else {
    console.log("> Huomioiden kirjoitus peruttiin");
  }
}

/* var selection = $("empty");
for (var prosid in muuttuneetPros) {
  selection.add($("#"+prosid));
}
if (selection.size() > 0) {
  if (window.confirm("Päivitetäänkö muuttuneiden prosessien näkymät (" + selection.size() + " kpl)?")) {
    var korvaakaikki = 1;
    load(__SCRIPTS_DIR__ + "Tiedonhallintamalli/Luo näkymä prosessille.ajs");
    // TODO miten yläprosessien ja aliprosessien näkymät, pitääkö ne myös päivittää? --> ratkaistu toisaalla!
  }
}*/
console.log("> Valmis");
