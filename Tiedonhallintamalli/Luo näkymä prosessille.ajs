/*
 * Luo 360-näkymän Espoon tiedonhallintamalliin kuuluvalle prosessille. Näkymä luodaan 
 * Views > Tiedonhallintamalli > Prosessihierarkia kansion alikansioon.
 * Luo näkymän kaikille Archin käyttöliittymässä valituille prosesseille. Valittuna voi myös olla
 * prosessien sijaan niiden 360-näkymät, jotka tällöin korvataan. Valittuna voi olla myös kansioita, 
 * jolloin näiden alla olevat prosessit tai prosessien 360-näkymät luodaan. Kysyy ennen olemassa olevien
 * näkymien korvaamista uusilla.
 */

load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");

maxaliprosessienyhteyksia = 25;

korvaakaikki = 0;

views = $("folder.Views").first();
tiedonhallintamalli = $("#"+views.id).children("folder.Tiedonhallintamalli").first();
if (tiedonhallintamalli == null) {
  tiedonhallintamalli = views.createFolder("Tiedonhallintamalli");
}
prosessihierarkia = $("#"+tiedonhallintamalli.id).children("folder.Prosessihierarkia").first();
if (prosessihierarkia == null) {
  prosessihierarkia = tiedonhallintamalli.createFolder("Prosessihierarkia");
}

function varmistaKansio(_prosessi) {
  _ylaprosessi = $("#"+_prosessi.id).outRels("specialization-relationship").targetEnds("business-process").filter(fth).first();
  _ylafolder = _ylaprosessi == null ? prosessihierarkia : varmistaKansio(_ylaprosessi);
  _nextfolder = $("#"+_ylafolder.id).children("folder."+_prosessi.name).first();
  if (_nextfolder == null) {
    _nextfolder = _ylafolder.createFolder(_prosessi.name);
  }
  return _nextfolder;
}

function lisaaAliprosessit(_pros, _kohdepros, _map) {
  $("#"+_pros.id).inRels("specialization-relationship").sourceEnds("business-process").filter(fth).each(function(_alipros) {
    if (!_map[_alipros.id]) { // tämän pitäisi estää ikisilmukat?
      _map[_alipros.id] = _kohdepros.id;
      lisaaAliprosessit(_alipros, _kohdepros, _map);
    }
  });
}

function luoAliprosessiMap(_prosessi) {
  _map = {};
  $("#"+_prosessi.id).inRels("specialization-relationship").sourceEnds("business-process").filter(fth).each(function(_pros) {
    _map[_pros.id] = _pros.id;
    lisaaAliprosessit(_pros, _pros, _map);
  });
  return _map;
}

console.log(">>> Aloitetaan... " + (new Date()).format("isoDateTime"));
valinta = $("empty");
$(selection).each(function(element) {  // explode relevant folder contents
  if (element.type == "folder") {
    if ($("#"+element.id).parents().filter(function (fol) { return fol.name == "Views"; }).size() > 0) {
      valinta.add($("#"+element.id).find("view"));
    } else {
      valinta.add($("#"+element.id).find("business-process"));
    }
  } else {
    valinta.add($("#"+element.id));
  }
});

valinta.each(function(element) {
  element = element.concept ? element.concept : element;  // jos tultiin näkymän kautta, käsitellään varsinaista elementtiä, ei sen näkymäilmentymää

  if (element.type != 'business-process') {
    if (element.prop("_KuvattavaKohde")) {  // jos valittuna on esim. kaavio, joka kuvaa tiettyä prosessia, oletetaan käyttäjän tarkoittavan että haluaa kuvata ko. prosessin
      element = $("#"+element.prop("_KuvattavaKohde")).first();
    }
  }

  if (element.type != 'business-process') {
    console.error("Elementti ei ole prosessi: " + element);
    return;
  }
  if (!fth(element)) {
    console.log("Ei kuulu tiedonhallintamalliin: " + element);
    return;
  }

  console.log("Luodaan näkymää prosessille " + element.name + "...");

  ylaprosessi = $("#"+element.id).outRels("specialization-relationship").targetEnds("business-process").filter(fth).first();
  folder = ylaprosessi == null ? prosessihierarkia : varmistaKansio(ylaprosessi);

  onjo = $("view").filter(function (view) { return view.prop("_KuvattavaKohde") == element.id; });
  onjo = onjo.add($("#"+folder.id).children("view." + element.name).not(onjo));
  if (onjo.size() > 0) {
    if (!korvaakaikki) {
      response = window.confirm("Prosessilla " + element.name + " on jo näkym(i)ä. Korvataanko? (Muutoin tehdään uusi rinnalle)");
      if (response && valinta.size() > 1) {
         resp2 = window.confirm("Korvataanko kaikki loput? Muutoin kysytään yksitellen.");
         if (resp2) korvaakaikki = 1;
      }
    }
    if (korvaakaikki || response) {
      onjo.each(function (view) { view.delete(); });
    }
  }

  nakyma = model.createArchimateView(element.name, folder);
  nakyma.prop("_KuvattavaKohde", element.id);
  nakyma.prop("_Luotu", (new Date()).format("isoDateTime"));
  nakyma.prop("_Tiedonhallintamalli", "1");
  nakyma.documentation = element.documentation + "\n\n(Klikkaa prosessia kuvassa nähdäksesi sen tarkempia ominaisuuksia vasemmalla alhaalla)";
  element.prop("_OmaNäkymä", nakyma.id);
  juoksevay = reunusy;

  ylaprosessiObj = null;
  if (ylaprosessi) {
    ylaprosessiObj = nakyma.add(ylaprosessi, keskitax(1,1), juoksevay, kuvionleveys, kuvionkorkeus);
    juoksevay += kuvionkorkeus + kuviovaliy;
  }

  saasyotteita = $("#"+element.id).inRels("flow-relationship").sourceEnds("business-process").filter(fth);
  saasyotteita.sort(tunnistecompare);
  tuottaasyotteita = $("#"+element.id).outRels("flow-relationship").targetEnds("business-process").filter(fth);
  tuottaasyotteita.sort(tunnistecompare);
  saasyotteita = saasyotteita.not(tuottaasyotteita);
  syotenum = Math.max(saasyotteita.size(), tuottaasyotteita.size());
  syotekorkeus = syotenum * (kuvionkorkeus + kuviovalix) - kuviovalix;
  syotekorkeus = Math.max(syotekorkeus, 2 * kuvionkorkeus); // vähän extra tilaa itse prosessille

  // lisätään käsillä oleva prosessi keskelle
  prosessiObj = nakyma.add(element, keskitax(1,1), keskitay(juoksevay, syotekorkeus, 1, 1), kuvionleveys, kuvionkorkeus);
  if (ylaprosessiObj) {
    relaatio = $("#"+element.id).outRels("specialization-relationship").filter(function(rel) { return rel.target.id == ylaprosessi.id; }).first();
    nakyma.add(relaatio, prosessiObj, ylaprosessiObj);
  }

  i = 1;
  saasyotteita.each(function(syote) {
    syoteObj = nakyma.add(syote, reunusx, keskitay(juoksevay, syotekorkeus, i++, saasyotteita.size()), kuvionleveys, kuvionkorkeus);
    relaatio = $("#"+element.id).inRels("flow-relationship").filter(function(rel) { return rel.source.id == syote.id; }).first();
    nakyma.add(relaatio, syoteObj, prosessiObj);
  });
  i = 1;
  tuottaasyotteita.each(function(syote) {
    syoteObj = nakyma.add(syote, kokoleveys - reunusx - kuvionleveys, keskitay(juoksevay, syotekorkeus, i++, tuottaasyotteita.size()), kuvionleveys, kuvionkorkeus);
    relaatio = $("#"+element.id).outRels("flow-relationship").filter(function(rel) { return rel.target.id == syote.id; }).first();
    nakyma.add(relaatio, prosessiObj, syoteObj);
    relaatio = $("#"+element.id).inRels("flow-relationship").filter(function(rel) { return rel.source.id == syote.id; }).first();
    if (relaatio) nakyma.add(relaatio, syoteObj, prosessiObj);
  });
  
  juoksevay += syotekorkeus + kuviovaliy;

  tietovarannot = $("#"+element.id).inRels("serving-relationship").sourceEnds("product").filter(fthHaving({"_Tietovaranto": "1"}));
  tietovarannot.sort(namecompare);
  tietojarjestelmat = $("#"+element.id).inRels("serving-relationship").sourceEnds("application-component").filter(fth);
  tietojarjestelmat.sort(namecompare);

  rivillakpl = Math.min(kuvioitamaxrivi, tietovarannot.size() + tietojarjestelmat.size());
  nykyx = 1;
  tietovarannot.each(function(elem) {
    nakyma.add(elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
    nykyx++;
    if (nykyx > rivillakpl) {
      nykyx = 1;
      juoksevay += kuvionkorkeus + kuviovaliy;
    }
  });
  tietojarjestelmat.each(function(elem) {
    nakyma.add(elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
    nykyx++;
    if (nykyx > rivillakpl) {
      nykyx = 1;
      juoksevay += kuvionkorkeus + kuviovaliy;
    }
  });
  if (nykyx > 1) juoksevay += kuvionkorkeus + kuviovaliy;
  juoksevay += Math.round((kuvionkorkeus + kuviovaliy)/2);

  aliprosessit = $("#"+element.id).inRels("specialization-relationship").sourceEnds("business-process").filter(fth);
  aliprosessit.sort(tunnistecompare);
  if (aliprosessit.size() > 0) {
    if (rivillakpl > 0) {  // kohdeprosessin käyttämien tietovarantojen ja tietojärjestelmien määrä > 0?
      note = nakyma.createObject("diagram-model-note", reunusx, juoksevay, noteleveys, notekorkeus);
      note.setText("Prosessin " + element.name + " aliprosessit sekä niiden itse tai omissa aliprosesseissaan hyödyntämät tietovarannot ja tietojärjestelmät");
      juoksevay += notekorkeus + kuviovaliy;
      aliprosrelaatiot = 0;
    } else aliprosrelaatiot = 1;

    rivillakpl = Math.min(kuvioitamaxrivi, aliprosessit.size());
    nykyx = 1;
    aliprosessit.each(function(elem) {
      aliprosObj = nakyma.add(elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
      if (aliprosrelaatiot) {
        relaatio = $("#"+elem.id).outRels("specialization-relationship").filter(function (rel) { return $("#"+rel.id).targetEnds("#"+element.id).size() > 0; }).first();
        nakyma.add(relaatio, aliprosObj, prosessiObj);
      }
      nykyx++;
      if (nykyx > rivillakpl) {
        nykyx = 1;
        juoksevay += kuvionkorkeus + kuviovaliy;
      }
    });
    if (nykyx > 1) juoksevay += kuvionkorkeus + kuviovaliy;
  }
  juoksevay += kuvionkorkeus + kuviovaliy;

  aliprosessimap = luoAliprosessiMap(element);

  alitietovarannot = $("empty");
  alitietojarjestelmat = $("empty");
  for (aliprosid in aliprosessimap) {  
    alitietovarannot.add($("#"+aliprosid).inRels("serving-relationship").sourceEnds("product").filter(fth).not(alitietovarannot));
    alitietojarjestelmat.add($("#"+aliprosid).inRels("serving-relationship").sourceEnds("application-component").filter(fth).not(alitietojarjestelmat));
  }
  alitietovarannot = alitietovarannot.not(tietovarannot);
  alitietovarannot.sort(namecompare);
  alitietojarjestelmat = alitietojarjestelmat.not(tietojarjestelmat);
  alitietojarjestelmat.sort(namecompare);

  rivillakpl = Math.min(kuvioitamaxrivi, alitietovarannot.size() + alitietojarjestelmat.size());
  nykyx = 1;
  alitietovarannot.each(function(elem) {
    nakyma.add(elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
    nykyx++;
    if (nykyx > rivillakpl) {
      nykyx = 1;
      juoksevay += kuvionkorkeus + kuviovaliy;
    }
  });
  alitietojarjestelmat.each(function(elem) {
    nakyma.add(elem, keskitax(nykyx, rivillakpl), juoksevay, kuvionleveys, kuvionkorkeus);
    nykyx++;
    if (nykyx > rivillakpl) {
      nykyx = 1;
      juoksevay += kuvionkorkeus + kuviovaliy;
    }
  });
  if (nykyx > 1) juoksevay += syotekorkeus + kuviovaliy;

  // lisätään tietovarantojen ja tietojärjestelmien relaatioita
  aliprosessimap[element.id] = element.id; // tarkastellaan myös kohdeprosessi tässä
  aliprosessivalues = {};
  for (alipros in aliprosessimap)  {
    aliprosessivalues[aliprosessimap[alipros]] = alipros;
  }
  nakymaprosmap = {}
  $("#"+nakyma.id).children("business-process").each(function(viewpros) {
    nakymaprosmap[viewpros.concept.id] = viewpros;
  });
  tv_ja_tj = $("#"+nakyma.id).children("product").add($("#"+nakyma.id).children("application-component"));
  aliprosrels = [];
  tv_ja_tj.each(function(viewelem) {
    kasitelty = {};
    $("#"+viewelem.concept.id).outRels("serving-relationship").each(function(rel) {
      kohdepros = $("#"+rel.id).targetEnds("business-process").first();
      if (kohdepros == null) return;
      if (!aliprosessivalues[kohdepros.id]) return;
      kuvanpros_id = aliprosessimap[kohdepros.id];
      if (kuvanpros_id == null) return;
      if (kasitelty[kuvanpros_id]) return;
      aliprosrels.push({
        "rel": rel,
        "src": viewelem,
        "trg": nakymaprosmap[kuvanpros_id]
      });
      kasitelty[kuvanpros_id] = "1";
    });
  });
  //console.log("aliprosrels.length = " + aliprosrels.length);
  if (aliprosrels.length <= maxaliprosessienyhteyksia) {
    for (i = 0; i < aliprosrels.length; i++) {
      nakyma.add(aliprosrels[i]["rel"], aliprosrels[i]["src"], aliprosrels[i]["trg"]);
    }
  }
  
  varitettavaNakyma = nakyma;
  load(__SCRIPTS_DIR__ + "~lib/VäritäNäkymä.ajs");
  
  console.log("... luotu.");

});

console.log("<<<");
console.log("");
