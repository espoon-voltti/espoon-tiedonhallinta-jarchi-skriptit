/*
 * Luo toimialakohtaiset tietojärjestelmäkartat omistajatiedon (organisaatiot) perusteella. Kaikki
 * olemassa olevat järjestelmäkartat poistetaan ensin (jos on), ja luodaan sitten uudelleen.
 */

load(__SCRIPTS_DIR__ + "~lib/Yhteiset apufunktiot.ajs");
load(__SCRIPTS_DIR__ + "~lib/date.format.js");


console.log(">>> Tietojärjestelmäkarttojen luonti " + (new Date()).format("isoDateTime"));
if (!window.confirm("Tämä poistaa ja luo uudestaan kaikki tietojärjestelmäkartat. Jatketaanko?")) exit();

views = $("folder.Views").first();
tiedonhallintamalliFolder = $("#"+views.id).children("folder.Tiedonhallintamalli").first();
if (tiedonhallintamalliFolder == null) {
  tiedonhallintamalliFolder = views.createFolder("Tiedonhallintamalli");
}
tietojarjestelmatFolder = $("#"+tiedonhallintamalliFolder.id).children("folder.Tietojärjestelmät").first();
if (tietojarjestelmatFolder == null) {
  tietojarjestelmatFolder = tiedonhallintamalliFolder.createFolder("Tietojärjestelmät");
}

toimialaMap = {};
jarjMap = {}

relaatiot = $("business-actor").filter(fth).outRels(".vastaa").filter(function (rel) {
  ratkaisu = rel.target.type == "application-component" && fth(rel.target);
  return ratkaisu;
});
relaatiot.sort(function (left, right) { orgcmp = namecompare(left.source, right.source); return orgcmp ? orgcmp : namecompare(left.target, right.target); });
relaatiot.each(function (rel) {
  org = rel.source;
  jarj = rel.target;
  tomiala = "Muut";
  if (org.prop("Toimiala")) toimiala = org.prop("Toimiala");
  if (org.prop("Sisäinen/ulkoinen") == "ulkoinen") toimiala = "Ulkoiset";
  if (!toimialaMap[toimiala]) {
    toimialaMap[toimiala] = {};
  }
  if (!toimialaMap[toimiala][org.name]) {
    toimialaMap[toimiala][org.name] = [];
  }
  toimialaMap[toimiala][org.name].push(jarj);
  jarjMap[jarj.id] = jarj;
});

console.log("> Lasketaan ja päivitetään järjestelmien prosessien ja liittymien määrät, kestää hetken, kärsivällisyyttä...");
jarjSalkkuMap = {};
jarjestelmat = $("application-component").filter(fth);
jarjestelmat.sort(namecompare);
jarjestelmat.each(function (jarj) {
  jarj.prop("_Prosesseja", $("#"+jarj.id).outRels("serving-relationship").targetEnds("business-process").filter(fth).size());
  jarj.prop("_Liittymiä", $("#"+jarj.id).rels("flow-relationship").filter(fth).targetEnds("application-component").size());
  if (jarj.prop("Järjestelmäsalkku ID")) {  // tarkistetaan mahdolliset salkku-duplikaatit samalla...
    if (jarjSalkkuMap[jarj.prop("Järjestelmäsalkku ID")]) {
      herja = "Löytyi useita järjestelmiä samalla Järjestelmäsalkku ID:llä, mm. " + jarjSalkkuMap[jarj.prop("Järjestelmäsalkku ID")].name + " ja " + jarj.name + ". Tämä olisi syytä korjata manuaalisesti.";
      console.error(herja);
      if (!window.confirm(herja + " Jatketaanko?")) exit();
    }
    jarjSalkkuMap[jarj.prop("Järjestelmäsalkku ID")] = jarj;
  }

  if (jarjMap[jarj.id]) return; // käsitellään lopuksi vain ne, joita ei ole vielä käsitelty
  if (!toimialaMap["Muut"]) toimialaMap["Muut"] = {};
  if (jarj.prop("_JärjestelmäsalkunVapaateksti") == "1") {
    if (!toimialaMap["Muut"]["Vapaatekstit Järjestelmäsalkun liittymissä"]) toimialaMap["Muut"]["Vapaatekstit Järjestelmäsalkun liittymissä"] = [];
    toimialaMap["Muut"]["Vapaatekstit Järjestelmäsalkun liittymissä"].push(jarj);
  } else {
   if (!toimialaMap["Muut"]["Ilman omistajaa"]) toimialaMap["Muut"]["Ilman omistajaa"] = [];
   toimialaMap["Muut"]["Ilman omistajaa"].push(jarj);
  }
});

$("#"+tietojarjestelmatFolder.id).find("view").each(function (view) {
  if (view.prop("_Järjestelmäkartta")) {
    console.log("> Poistetaan näkymä " + view.name);
    view.delete();
  }
});

for (toimiala in toimialaMap) {
  console.log("> Luodaan järjestelmäkarttaa " + toimiala);
  nakyma = model.createArchimateView("Järjestelmäkartta " + toimiala, tietojarjestelmatFolder);
  nakyma.prop("_Luotu", (new Date()).format("isoDateTime"));
  nakyma.prop("_Tiedonhallintamalli", "1");
  nakyma.prop("_Järjestelmäkartta", toimiala);
  
  notekorkeus = 50; // oletuksesta poikkeava
  kuvioitamaxrivi = Math.floor((kokoleveys - 4*reunusx - + kuviovalix) / (kuvionleveys+kuviovalix)); // oletuksesta poikkeava
  grouptopy = 50;
  groupleveys = 2*reunusx + kuvioitamaxrivi * (kuvionleveys + kuviovalix) - kuviovalix;

  juoksevay = reunusy;
  note = nakyma.createObject("diagram-model-note", reunusx + Math.round((groupleveys - noteleveys) / 2), juoksevay, noteleveys, notekorkeus);
  note.setText(nakyma.name);
  note.fontStyle = "bold";
  note.fontSize = 12;
  note.textAlignment = TEXT_ALIGNMENT.CENTER;
  note.textPosition = TEXT_POSITION.CENTER;
  juoksevay += notekorkeus + kuviovaliy;
  

  for (org in toimialaMap[toimiala]) {
    jarjestelmat = toimialaMap[toimiala][org];
    riveja = Math.ceil(jarjestelmat.length / kuvioitamaxrivi);
    group = nakyma.createObject("diagram-model-group", reunusx, juoksevay, groupleveys, grouptopy + riveja * (kuvionkorkeus + kuviovaliy));
    group.name = org;
    juoksevay += grouptopy;
    juoksevax = 2 * reunusx;
    xcnt = 1;
    for (i = 0; i < jarjestelmat.length; i++) {
      nakyma.add(jarjestelmat[i], juoksevax, juoksevay, kuvionleveys, kuvionkorkeus);
      juoksevax += kuvionleveys + kuviovalix;
      xcnt++;
      if (xcnt > kuvioitamaxrivi) {
        xcnt = 1;
        juoksevax = 2 * reunusx;
        juoksevay += kuvionkorkeus + kuviovaliy;
      }
    }
    if (xcnt > 1) juoksevay += kuvionkorkeus + kuviovaliy;
    juoksevay += 2 * kuviovaliy;
  }

  varitettavaNakyma = nakyma;
  load(__SCRIPTS_DIR__ + "~lib/VäritäNäkymä.ajs");
}

console.log("<<<");
console.log("");

