/*
 * Tiedonhallintamallin skripteille yhteisiä apufunktioita ja arvoja.
 */

kuvionleveys = 150;
kuvionkorkeus = 100;
kokoleveys = 1000;
kuviovalix = 30;
kuviovaliy = 15;
reunusx = 30;
reunusy = 30;
noteleveys = 300;
notekorkeus = 75;
kuvioitamaxrivi = Math.floor((kokoleveys - 2*reunusx + kuviovalix) / (kuvionleveys+kuviovalix));

/**
 * Käytetään suodatattamaan vain tiedonhallintamalliin kuuluvat elementit
 */
function fth(_elem) {
  return _elem.prop("_Tiedonhallintamalli") == "1";
}

/**
 * Palauttaa funktion, jolla voi suodattaa vain tiedonhallintamalliin kuuluvat elementit, joissa 
 * on tietyt ominaisuudet asetettu (ensimmäinen parametri) tai joilla tietty ominaisuus 
 * ei ole asetettu (toinen parametri). Ottaa argumenttina objektin, jossa avaimina ovat tarkistettavat 
 * ominaisuudet ja niiden arvoina ne arvot, joihin ko. ominaisuuksien on täsmättävä.
 */
function fthHaving(_propFilters, _propNotFilters) {
  return (function() {
    var _filters = _propFilters;
    var _notFilters = _propNotFilters;
    return function(_elem) {
      if (!(_elem.prop("_Tiedonhallintamalli") == "1")) return false;
      if (_filters) {
        for (avain in _filters) {
          if (!(_elem.prop(avain) == _filters[avain])) return false;
        }
      }
      if (_notFilters) {
        for (avain in _notFilters) {
          if (_elem.prop(avain) == _notFilters[avain]) return false;
        }
      }
      return true;
    }
  })();
}

/**
 * Käytetään vertailemaan kohteiden nimiä keskenään
 */
function namecompare(left,right) {
  leftname = left.name ? left.name.toUpperCase() : left.name;
  rightname = right.name ? right.name.toUpperCase() : right.name;
  if (leftname > rightname) return 1;
  if (leftname < rightname) return -1; 
  return 0;
}

/**
 * Käytetään vertailemaan tiedonhallintamallin prosessien tunnisteita keskenään
 */
function tunnistecompare(left,right) {
  tunleft = left.prop("Tunniste");
  tunright = right.prop("Tunniste");
  if (tunleft == null && tunright == null) return namecompare(left, right);
  if (tunleft == null) return 1;
  if (tunright == null) return -1;
  leftparts = tunleft.split(".");
  rightparts = tunright.split(".");
  leftmatch = leftparts[0].match(/(\d+)/);  // vertaillaan ensimmäisen pisteen edeltävästä osasta vain numero-osaa
  rightmatch = rightparts[0].match(/(\d+)/);
  if (leftmatch && rightmatch) {
    if (parseInt(leftmatch[0]) > parseInt(rightmatch[0])) return 1;
    if (parseInt(leftmatch[0]) < parseInt(rightmatch[0])) return -1;
  } else {
    retval = namecompare(leftparts[0], rightparts[0]);
    if (retval) return retval;
  }
  i = 1;
  while (i < leftparts.length && i < rightparts.length) {
    if (parseInt(leftparts[i]) > parseInt(rightparts[i])) return 1;
    if (parseInt(leftparts[i]) < parseInt(rightparts[i])) return -1;
    i++;
  }
  if (leftparts.length > i) return 1;
  if (rightparts.length > i) return -1;
  return 0;
}

/**
 * Yhteisiä funktioita elementtien asetteluun kaavioissa
 */

function keskitax(_num, _yht) {
  _blokinleveys = _yht * (kuvionleveys + kuviovalix) - kuviovalix;
  _vasenx = Math.round((kokoleveys - _blokinleveys)/2);
  return _vasenx + (_num - 1) * (kuvionleveys + kuviovalix);
}

function keskitay(_alkuy, _kokokorkeus, _num, _yht) {
  _blokinkorkeus = _yht * (kuvionkorkeus + kuviovaliy) - kuviovaliy;
  _yliny = Math.round((_kokokorkeus - _blokinkorkeus)/2);
  return _alkuy + _yliny + (_num-1) * (kuvionkorkeus + kuviovaliy);
}
